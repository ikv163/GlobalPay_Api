<?php

namespace app\controllers;

use app\common\Common;
use app\common\DES;
use app\models\Cashier;
use app\models\Deposit;
use app\models\DepositSearch;
use app\models\FinanceDetail;
use app\models\FinanceDetailSearch;
use app\models\Order;
use app\models\OrderSearch;
use app\models\QrCode;
use app\models\QrCodeAdd;
use app\models\QrCodeEdit;
use app\models\SystemConfig;
use app\models\UserBankcard;
use app\models\Withdraw;
use app\models\WithdrawSearch;
use GatewayWorker\Lib\Gateway;
use Yii;
use yii\filters\VerbFilter;

class CashierController extends \yii\web\Controller
{
    public function init()
    {
        header("Access-Control-Allow-Origin: *");
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    '*' => ['post'],
                ],
            ],
            'selfFilter' => [
                'class' => 'app\components\AccessFilter',
                'only' => ['*'],
            ],
        ];
    }


    public function beforeAction($action)
    {

        $queryParams = \Yii::$app->request->bodyParams;
        $redisUser = array();
        if (isset($queryParams['token']) && $queryParams['token']) {
            if (\Yii::$app->redis->get('User_' . $queryParams['token'])) {
                $redisUser = json_decode(\Yii::$app->redis->get('User_' . $queryParams['token']), true);
            }
        }


        //日志数据
        $logData = array(
            'uri' => \Yii::$app->controller->id . '_' . \Yii::$app->controller->action->id,  //请求的uri
            'query_params' => $queryParams,  //请求参数
            'client_ip' => Common::getClientIp(),  //用户ip
            'redis_user' => $redisUser,  //用户信息，  登录后才有
        );


        \Yii::info(json_encode($logData, 256), 'cashier_init_log');


        return parent::beforeAction($action);

    }


    /**
     * 收款员各统计信息
     */
    public function actionCashierstatistics()
    {
        $params = \Yii::$app->request->bodyParams;
        $returnData = Common::ret();

        $tmpData = array();
        $userInfo = Cashier::getUserInfo($params['username']);
        $tmpData['income'] = $userInfo && isset($userInfo['income']) && is_numeric($userInfo['income']) && $userInfo['income'] >= 0 ? sprintf("%01.2f", $userInfo['income']) : '0.00';
        $tmpData['security_money'] = $userInfo && isset($userInfo['security_money']) && is_numeric($userInfo['security_money']) && $userInfo['security_money'] >= 0 ? sprintf("%01.2f", $userInfo['security_money']) : '0.00';
        $tmpData['wechat_amount'] = $userInfo && isset($userInfo['wechat_amount']) && is_numeric($userInfo['wechat_amount']) && $userInfo['wechat_amount'] >= 0 ? sprintf("%01.2f", $userInfo['wechat_amount']) : '0.00';
        $tmpData['alipay_amount'] = $userInfo && isset($userInfo['alipay_amount']) && is_numeric($userInfo['alipay_amount']) && $userInfo['alipay_amount'] >= 0 ? sprintf("%01.2f", $userInfo['alipay_amount']) : '0.00';
        $tmpData['union_pay_amount'] = $userInfo && isset($userInfo['union_pay_amount']) && is_numeric($userInfo['union_pay_amount']) && $userInfo['union_pay_amount'] >= 0 ? sprintf("%01.2f", $userInfo['union_pay_amount']) : '0.00';
        $tmpData['bank_card_amount'] = $userInfo && isset($userInfo['bank_card_amount']) && is_numeric($userInfo['bank_card_amount']) && $userInfo['bank_card_amount'] >= 0 ? sprintf("%01.2f", $userInfo['bank_card_amount']) : '0.00';

        $dailyOrderAmountAlipay = Common::cashierTodayMoney($params['username'], QrCode::$QrTypeAlipay, 0, 0, 1); //支付宝当日成功收款金额
        $tmpData['daily_order_amount_alipay'] = is_numeric($dailyOrderAmountAlipay) && $dailyOrderAmountAlipay >= 0 ? $dailyOrderAmountAlipay : '0.00';

        $dailyOrderAmountWechat = Common::cashierTodayMoney($params['username'], QrCode::$QrTypeWechat, 0, 0, 1); //微信当日成功收款金额
        $tmpData['daily_order_amount_wechat'] = is_numeric($dailyOrderAmountWechat) && $dailyOrderAmountWechat >= 0 ? $dailyOrderAmountWechat : '0.00';

        $dailyOrderTimesAlipay = Common::cashierTodayTimes($params['username'], QrCode::$QrTypeAlipay, 0, 0, 1); //支付宝当日成功收款次数
        $tmpData['daily_order_times_alipay'] = is_numeric($dailyOrderTimesAlipay) && $dailyOrderTimesAlipay >= 0 ? intval($dailyOrderTimesAlipay) : 0;

        $dailyOrderTimesWechat = Common::cashierTodayTimes($params['username'], QrCode::$QrTypeWechat, 0, 0, 1); //微信当日成功收款次数
        $tmpData['daily_order_times_wechat'] = is_numeric($dailyOrderTimesWechat) && $dailyOrderTimesWechat >= 0 ? intval($dailyOrderTimesWechat) : 0;

        $tmpData['available_withdraw_amount'] = isset($userInfo['security_money']) && is_numeric($userInfo['security_money']) && $userInfo['security_money'] > 0 ? sprintf('%.2f', $userInfo['security_money']) : '0.00';

        $returnData['result'] = 1;
        $returnData['msg'] = 'succeed';
        $returnData['data'] = $tmpData;

        return $returnData;


    }

    /**
     * 收款员存款记录
     * @params  $cashier_name           [非必填]
     * @params  $system_deposit_id      [非必填]
     * @params  $deposit_status         [非必填]
     * @params  $starttime              [非必填]
     * @params  $endtime                [非必填]
     * @params  $startmoney             [非必填]
     * @params  $endmoney               [非必填]
     * @params  $page                   [非必填]
     * @params  $pageSize               [非必填]
     * @params  $include_followers      [非必填]   是否包含下级：1是  0否， 默认0
     * @return  array
     */
    public function actionDepositrecords()
    {
        \Yii::info(json_encode($_POST, 256), 'Cashier_Depositrecords');
        $returnData = Common::ret();

        $searchModel = new DepositSearch();
        $data = $searchModel->search(\Yii::$app->request->bodyParams);

        $returnData['result'] = is_array($data) ? 1 : 0;
        $returnData['msg'] = is_array($data) ? (isset($data['total']) && is_numeric($data['total']) && $data['total'] > 0 ? \Yii::t('app', 'succeed') : \Yii::t('app', 'no_data')) : $data;
        $returnData['data'] = is_array($data) ? $data : array();

        return $returnData;
    }

    /**
     * 存款记录详情
     * @params  int     $id     存款记录表自增id
     * @return  array
     */
    public function actionDrecorddetail()
    {
        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        if (!($params && isset($params['id']) && is_numeric($params['id']) && $params['id'] > 0 && intval($params['id']) == $params['id'])) {
            $returnData['msg'] = 'id' . \Yii::t('app/error', 'param_error');
            return $returnData;
        }

        $orderData = Deposit::find()->where(array('id' => $params['id']))->asArray()->one();

        //加入订单状态名称
        if ($orderData) {
            $orderData['deposit_status_name'] = isset(Deposit::$OrderStatusRel[$orderData['deposit_status']]) ? Deposit::$OrderStatusRel[$orderData['deposit_status']] : '';
        }

        $returnData['result'] = $orderData ? 1 : 0;
        $returnData['msg'] = $orderData ? \Yii::t('app', 'succeed') : \Yii::t('app', 'no_data');
        $returnData['data'] = $orderData ? $orderData : array();

        return $returnData;
    }


    /**
     * 收款员取款记录
     * @params  $withdraw_status    [非必填]
     * @params  $system_withdraw_id [非必填]
     * @params  $starttime          [非必填]
     * @params  $endtime            [非必填]
     * @params  $startmoney         [非必填]
     * @params  $endmoney           [非必填]
     * @params  $page               [非必填]
     * @params  $pageSize           [非必填]
     * @params  $include_followers  [非必填]   是否包含下级：1是  0否， 默认0
     * @return  array
     */
    public function actionWithdrawrecords()
    {
        $returnData = Common::ret();

        $searchModel = new WithdrawSearch();

        $params = array_merge(\Yii::$app->request->bodyParams, array('user_type' => 2));
        $data = $searchModel->search($params);

        $returnData['result'] = is_array($data) ? 1 : 0;
        $returnData['msg'] = is_array($data) ? (isset($data['total']) && is_numeric($data['total']) && $data['total'] > 0 ? \Yii::t('app', 'succeed') : \Yii::t('app', 'no_data')) : $data;
        $returnData['data'] = is_array($data) ? $data : array();

        return $returnData;
    }

    /**
     * 提款记录详情
     * @params  int     $id
     * @return  array
     */
    public function actionWrecorddetail()
    {
        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        if (!($params && isset($params['id']) && is_numeric($params['id']) && $params['id'] > 0 && intval($params['id']) == $params['id'])) {
            $returnData['msg'] = 'id' . \Yii::t('app/error', 'param_error');
            return $returnData;
        }

        $orderData = Withdraw::find()->select('withdraw.*, user_bankcard.bankcard_number')->leftJoin('user_bankcard', 'user_bankcard.id = withdraw.bankcard_id')->where(array('withdraw.id' => $params['id'], 'withdraw.user_type' => 2))->asArray()->one();

        //加入订单状态名称, 删除user_type
        if ($orderData) {
            if (isset($orderData['user_type'])) {
                unset($orderData['user_type']);
            }
            $orderData['withdraw_status_name'] = isset(Withdraw::$OrderStatusRel[$orderData['withdraw_status']]) ? Withdraw::$OrderStatusRel[$orderData['withdraw_status']] : '';
        }

        $returnData['result'] = $orderData ? 1 : 0;
        $returnData['msg'] = $orderData ? \Yii::t('app', 'succeed') : \Yii::t('app', 'no_data');
        $returnData['data'] = $orderData ? $orderData : array();

        return $returnData;
    }


    /**
     * 接单确认到账(包括自已确认和直接上级代理确认)
     * @params      string     $order_id        系统订单号(非自增id)
     * @return      array
     */
    public function actionConfirmorder()
    {
        try {
            $params = \Yii::$app->request->bodyParams;
            $returnData = Common::ret();

            $lockKey = $params['order_id'] . 'Confirmorder';
            $isContinue = Common::redisLock($lockKey, 3);
            if ($isContinue === false) {
                $returnData['result'] = 0;
                $returnData['msg'] = '操作频繁，3秒后再试';
                return $returnData;
            }

            \Yii::info(json_encode(['params' => $params], 256), 'cashier_confirmorder');

            if (!(isset($params['order_id']) && $params['order_id'])) {
                $returnData['msg'] = 'order_id' . \Yii::t('app/error', 'param_error');
                return $returnData;
            }

            //查询订单
            $orderData = Order::find()->where(['order_id' => $params['order_id']])->asArray()->one();

            \Yii::info(json_encode(['order' => $orderData], 256), 'cashier_order');

            if (!$orderData) {
                $returnData['msg'] = \Yii::t('app/error', 'order_not_exists');
                return $returnData;
            }

            //验证订单过期时间
            if (strtotime($orderData['expire_time']) <= time()) {
                $returnData['msg'] = \Yii::t('app/error', 'order_expired');
                return $returnData;
            }

            //验证当前订单状态是否允许确认收款
            if (!in_array($orderData['order_status'], Order::$AllowConfirmOrderStatus)) {
                $returnData['msg'] = \Yii::t('app/error', 'order_not_allow_to_confirm');
                return $returnData;
            }

            $res_c = Cashier::find()->where(['username' => $params['username'], 'cashier_status' => 1])->one();
            if (!$res_c) {
                $returnData['msg'] = '账号不存在或状态已被禁用';
                return $returnData;
            }

            //比对该订单的接单人是不是当前的登录用户， 若不是， 则判断当前登录用户是否为接单人的上级， 还不是， 不让修改
            if ($orderData['username'] != $params['username']) {
                $returnData['msg'] = '目前上级无权确认下级的订单';
                return $returnData;
                //获取接单人上级信息
                $parentInfo = Cashier::find()->select('parent_name')->where(['username' => $orderData['username']])->asArray()->one();
                $parentName = $parentInfo && isset($parentInfo['parent_name']) && $parentInfo['parent_name'] ? $parentInfo['parent_name'] : '';
                \Yii::info($parentName, 'cashier_order_parent');
                if (!$parentName || $parentName != $params['username']) {
                    //接单人无上级或当前登录用户不是接单人的上级， 返回无操作权限
                    unset($parentInfo);
                    unset($parentName);
                    $returnData['msg'] = \Yii::t('app/error', 'option_denied');
                    return $returnData;
                }
                unset($parentInfo);
                unset($parentName);
            }

            //执行一系列操作：  修改订单状态、 (扣减支付宝/微信接单额度 : 派单的时候已减, 这里不用处理)、 结算佣金(从接单员本人开始，一直到最上层代理)、 写入资金交易明细
            //修改订单状态 + 结算佣金 + 写入资金明细
            $res = Order::orderOk($orderData['id'], $params['username']);
            if (!(isset($res) && $res['result'] == 1)) {
                \Yii::error(json_encode(['data' => $orderData], 256), 'cashier_confirmorder_failed');
                throw new \Exception(\Yii::t('app', 'settle_cashier_commission_failed'));
            }
            $returnData['result'] = 1;
            $returnData['msg'] = \Yii::t('app', 'succeed');
            return $returnData;
        } catch (\Exception $e) {
            $returnData['result'] = 0;
            $returnData['msg'] = 'error:' . $e->getMessage();
        }
        return $returnData;
    }


    /**
     * 上传二维码
     */
    public function actionAddqrcode()
    {
        try {
            $returnData = Common::ret();
            $params = \Yii::$app->request->bodyParams;
            $temp = $params;
            $temp['qr_address'] = '****';
            \Yii::info(json_encode($temp, 256), 'Cashier_Addqrcode_params');

            $lockKey = $params['username'] . 'Addqrcode';
            $isContinue = Common::redisLock($lockKey, 3);
            if ($isContinue === false) {
                $returnData['result'] = 0;
                $returnData['msg'] = '操作频繁，3秒后再试';
                return $returnData;
            }

            //数据验证
            $qrCodeAdd = new QrCodeAdd();
            $qrCodeAdd->load($params, '');

            if (!($qrCodeAdd->validate())) {
                $returnData['msg'] = Common::getModelError($qrCodeAdd);
                \Yii::error(json_encode($temp, 256), 'Cashier_Addqrcode_validateError');
                return $returnData;
            }

            if (isset($params['qr_address_manual']) && !empty($params['qr_address_manual'])) {
                $qrUrl = $params['qr_address_manual'];
            } else {
                //处理二维码url
                $qrUrl = Common::parseBase64DataToUrl($params['qr_address']);
                if (!$qrUrl) {
                    \Yii::error(json_encode($temp, 256), 'Cashier_Addqrcode_jiexi');
                    $returnData['msg'] = '二维码解析失败，请裁剪后重试';
                    return $returnData;
                }
            }

            $res_qr = QrCode::find()->where(['qr_address' => $qrUrl])->one();
            if ($res_qr) {
                \Yii::error(json_encode($temp, 256), 'Cashier_Addqrcode_exits');
                $returnData['msg'] = '此二维码已存在';
                return $returnData;
            }
            if ($qrCodeAdd->qr_type == 3) {
                $maxMin = SystemConfig::getSystemConfig('UnionPay_PerMaxMin');
            } else {
                $maxMin = SystemConfig::getSystemConfig('PerMaxMin');
            }
            if (!$maxMin) {
                $returnData['msg'] = '系统未设置每笔最大最小金额';
                \Yii::error(json_encode($temp, 256), 'Cashier_Addqrcode_PerMaxMin');
                return $returnData;
            } else {
                $maxMin = json_decode($maxMin, 1);
                if ($maxMin['max'] <= $maxMin['min'] || !isset($maxMin['max']) || empty($maxMin['max']) || !isset($maxMin['min']) || empty($maxMin['min'])) {
                    $returnData['msg'] = '系统设置每笔最大最小金额错误';
                    \Yii::error(json_encode($temp, 256), 'Cashier_Addqrcode_PerMaxMin1');
                    return $returnData;
                }
            }

            $res_c = Cashier::find()->where(['username' => \Yii::$app->request->post('username'), 'cashier_status' => 1])->one();
            if (!$res_c) {
                \Yii::error(json_encode($temp, 256), 'Cashier_Addqrcode_forbiden');
                $returnData['msg'] = '账号不存在或状态已被禁用';
                return $returnData;
            }

            //数据组装
            $model = new QrCode();
            $model->username = \Yii::$app->request->post('username');
            $model->qr_code = $qrCodeAdd->qr_account . '_0' . $qrCodeAdd->qr_type;
            $model->qr_address = $qrUrl;
            $model->qr_nickname = $qrCodeAdd->qr_nickname;
            $model->qr_account = $qrCodeAdd->qr_account;
            $model->per_max_amount = $maxMin['max'];
            $model->per_min_amount = $maxMin['min'];
            $model->per_day_amount = $qrCodeAdd->per_day_amount;
            $model->per_day_orders = $qrCodeAdd->per_day_orders;
            $model->qr_type = $qrCodeAdd->qr_type;
            if ($model->qr_type == 1) {
                $model->alipay_uid = isset($_POST['alipay_uid']) ? $_POST['alipay_uid'] : '';
            } else {
                $model->alipay_uid = '888';
            }
            $model->qr_status = 1;
            $model->is_shopowner = 1;
            $model->qr_location = $qrCodeAdd->qr_location;
            $model->last_money_time = $model->last_code_time = date('Y-m-d H:i:s', time());

            if (in_array($model->qr_type, [3, 4])) {
                $model->telephone = $qrCodeAdd->telephone;
                $model->bank_address = $qrCodeAdd->bank_address;
                $model->bank_card_number = $qrCodeAdd->bank_card_number;
                $model->bank_code = $qrCodeAdd->bank_code;
                $model->real_name = $qrCodeAdd->real_name;
            } else {
                $model->telephone = '';
                $model->bank_address = '';
                $model->bank_card_number = '';
                $model->bank_code = '';
                $model->real_name = '';
            }

            if (!($model->validate())) {
                $returnData['msg'] = Common::getModelError($model);
                \Yii::error(json_encode($temp, 256), 'Cashier_Addqrcode_validateModelError');
                return $returnData;
            }
            $res = $model->save();
            $returnData['result'] = $res ? 1 : 0;
            if ($res) {
                $returnData['msg'] = '添加二维码成功';
            } else {
                $returnData['msg'] = '添加二维码失败';
            }
            \Yii::info(json_encode(['params' => $temp], 256), 'cashier_addqrcode_ok');
            return $returnData;
        } catch (\Exception $e) {
            $returnData['result'] = 0;
            $returnData['msg'] = '添加二维码异常';
            \Yii::info(json_encode(['data' => $temp, 'msg' => $e->getMessage()], 256), 'cashier_addqrcode_exception');
        }
        return $returnData;
    }


    /**
     * 获取收款员自己的二维码
     * @params  int     $qr_type   二维码类型：1支付宝   2微信    【非必填】
     * @return  array
     */
    public function actionQrcodes()
    {
        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        $where = array(
            'username' => $params['username'],
        );

        if (isset($params['qr_type']) && isset(QrCode::$QrTypeRel[$params['qr_type']])) {
            $where['qr_type'] = $params['qr_type'];
        }

        $qrData = QrCode::find()->where($where)->andWhere(['!=', 'qr_status', 9])->orderBy('qr_status desc')->asArray()->all();
        if ($qrData) {
            foreach ($qrData as &$qr) {
                $qr['status_name'] = isset($qr['qr_status']) && isset(QrCode::$QrStatusRel[$qr['qr_status']]) ? QrCode::$QrStatusRel[$qr['qr_status']] : '';
                $qr['qrTodayMoney'] = Common::qrTodayMoney($qr['qr_code'], 0, 0, 1);
                $qr['qrTodayTimes'] = Common::qrTodayTimes($qr['qr_code'], 0, 0, 1);
            }
        }

        $returnData['result'] = 1;
        $returnData['msg'] = $qrData ? \Yii::t('app', 'succeed') : \Yii::t('app', 'no_data');
        $returnData['data'] = $qrData ? $qrData : array();
        return $returnData;
    }


    /**
     * 获取二维码详情
     * @params  int $qrid   二维码自增id
     * @return  array
     */
    public function actionQrdetail()
    {
        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        if (!($params && isset($params['qrid']) && is_numeric($params['qrid']) && $params['qrid'] > 0 && intval($params['qrid']) == $params['qrid'])) {
            $returnData['msg'] = \Yii::t('app/error', 'param_error');
            return $returnData;
        }

        $where = array(
            ':id' => $params['qrid'],
        );

        $qrData = QrCode::find()->where('id=:id', $where)->asArray()->one();

        if ($qrData) {
            $qrData['status_name'] = isset($qrData['qr_status']) && isset(QrCode::$QrStatusRel[$qrData['qr_status']]) ? QrCode::$QrStatusRel[$qrData['qr_status']] : '';
        }

        $returnData['result'] = $qrData ? 1 : 0;
        $returnData['msg'] = $qrData ? \Yii::t('app', 'succeed') : \Yii::t('app', 'no_data');
        $returnData['data'] = $qrData ? $qrData : array();
        return $returnData;
    }


    /**
     * 修改单个二维码信息
     */
    public function actionEditqrcode()
    {
        try {
            $returnData = Common::ret();
            $params = \Yii::$app->request->bodyParams;
            $lockKey = $params['username'] . 'Editqrcode';
            $isContinue = Common::redisLock($lockKey, 3);
            if ($isContinue === false) {
                $returnData['result'] = 0;
                $returnData['msg'] = '操作频繁，3秒后再试';
                return $returnData;
            }

            \Yii::info(json_encode($params, 256), 'Carshier_Editqrcode_param');

            //数据验证
            $qrCodeEdit = new QrCodeEdit();
            $qrCodeEdit->load($params, '');

            if (!($qrCodeEdit->validate())) {
                $returnData['msg'] = Common::getModelError($qrCodeEdit);
                \Yii::error(json_encode($_POST, 256), 'Cashier_Editqrcode_validateError');
                return $returnData;
            }

            $res_c = Cashier::find()->where(['username' => \Yii::$app->request->post('username'), 'cashier_status' => 1])->one();
            if (!$res_c) {
                $returnData['msg'] = '账号不存在或状态已被禁用';
                return $returnData;
            }

            $model = QrCode::findOne(array('id' => $qrCodeEdit->id, 'username' => \Yii::$app->request->post('username')));

            if (!$model) {
                $returnData['msg'] = '二维码不存在';
                return $returnData;
            }

            $oriModel = $model;

            //如果状态传递是9，则执行删除操作
            if ($qrCodeEdit->qr_status == 9) {
                $model->qr_status = 9;
                if ($model->save()) {
                    \Yii::info(json_encode(['old_data' => $oriModel->toArray(), 'new_data' => $model->toArray()], 256), 'cashier_deleteQrcode');
                    $returnData['result'] = 1;
                    $returnData['msg'] = '删除二维码成功';
                    Yii::$app->redis->del($model->qr_code . '_redis');
                    return $returnData;
                } else {
                    $returnData['result'] = 0;
                    $returnData['msg'] = '删除二维码失败';
                    return $returnData;
                }
            }

            //如果状态传递是2，则判断此二维码配置信息是否填好，二维码所属人是否有额度
            if ($qrCodeEdit->qr_status == 2) {
                $retMsg = QrCode::qrcodeIsOk($model);
                if ($retMsg !== true) {
                    $returnData['result'] = 0;
                    $returnData['msg'] = $retMsg;
                    return $returnData;
                }
            }

            //校验原状态， 只有码状态为1，2的才允许修改
            if (!in_array($model->qr_status, array(1, 2))) {
                $returnData['result'] = 0;
                $returnData['msg'] = '当前二维码状态不允许修改';
                return $returnData;
            }



            //如果是修改支付宝二维码状态从非接单状态改为接单状态，且支付宝好友红包功能开启，需验证该二维码对应账号的心跳, 心跳不存在则不允许修改
            if($qrCodeEdit->qr_type == QrCode::$QrTypeAlipay && $model->qr_status != QrCode::$QrStatusOrder && $qrCodeEdit->qr_status == QrCode::$QrStatusOrder){

                //取支付宝好友红包功能配置开关
                if(SystemConfig::getSystemConfig('AlipayRedEnvelopSwitch')){
                    if(!($model->alipay_uid && is_numeric($model->alipay_uid) && strlen($model->alipay_uid) == 16)){
                        $returnData['result'] = 0;
                        $returnData['msg'] = '支付宝UID错误';
                        return $returnData;
                    }

                    //取redis中的心跳数据， 如不存在 ， 不允许改
                    if(!\Yii::$app->redis->get("AlipayRedEnvelopPulse_".$model->alipay_uid)){
                        $returnData['result'] = 0;
                        $returnData['msg'] = '无心跳';
                        return $returnData;
                    }
                }
            }



            $model->update_at = date('Y-m-d H:i:s');
            $model->qr_status = $qrCodeEdit->qr_status;
            $model->qr_nickname = $qrCodeEdit->qr_nickname;
            $model->qr_account = $qrCodeEdit->qr_account;
            $model->qr_type = $qrCodeEdit->qr_type;
            $model->qr_location = $qrCodeEdit->qr_location;
            $model->per_day_amount = $qrCodeEdit->per_day_amount;
            $model->per_day_orders = $qrCodeEdit->per_day_orders;
            $model->qr_status = $qrCodeEdit->qr_status;
            if ($model->qr_type == 1) {
                $model->alipay_uid = isset($_POST['alipay_uid']) ? $_POST['alipay_uid'] : '';
            } else {
                $model->alipay_uid = '888';
            }

            //校验新状态， 只允许修改为1，2，9
            if (!in_array($model->qr_status, array(1, 2, 9))) {
                $returnData['result'] = 0;
                $returnData['msg'] = '收款员不允许禁用二维码';
                return $returnData;
            }

            if (!($model->validate())) {
                $returnData['msg'] = Common::getModelError($model);
                \Yii::error(json_encode($_POST, 256), 'Cashier_Editqrcode_modelValidateError');
                return $returnData;
            }

            $res = $model->save();
            $returnData['result'] = $res ? 1 : 0;
            if ($res) {
                $returnData['msg'] = '二维码修改成功';
            } else {
                $returnData['msg'] = '二维码修改失败';
            }
            \Yii::info(json_encode(['old_data' => $oriModel->toArray(), 'new_data' => $model->toArray()], 256), 'cashier_editqrcode');
            return $returnData;
        } catch (\Exception $e) {
            $returnData['result'] = 0;
            $returnData['msg'] = \Yii::t('app/error', 'failed') . ':' . $e->getMessage();
            \Yii::info(json_encode(['old_data' => $oriModel->toArray(), 'new_data' => $model->toArray()], 256), 'cashier_editqrcode_error');
        }
        return $returnData;
    }

    /**
     * 一键结束接单
     * @params  int     $type   码类型 ： 1支付宝          2微信
     * @return  array
     */
    public function actionChangeallqrstatus()
    {
        \Yii::info(json_encode($_POST, 256), 'Cashier_Changeallqrstatus_params');
        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        if (!isset($params['type']) || empty($params['type']) || !in_array($params['type'], [1, 2, 3, 4])) {
            $returnData['msg'] = '参数传递错误';
            return $returnData;
        }

        $type = [1 => '支付宝', 2 => '微信', 3 => '云闪付', 4 => '银行卡'];

        //执行修改
        $res = QrCode::updateAll([
            'qr_status' => 1,
            'update_at' => date('Y-m-d H:i:s')
        ], [
            'and',
            ['username' => \Yii::$app->request->post('username')],
            ['qr_status' => 2],
            ['qr_type' => $params['type']],
        ]);

        if ($res) {
            $returnData['msg'] = '已停止' . $res . '个' . $type[$params['type']] . '二维码跑分';
            $returnData['result'] = 1;
        } else {
            $returnData['msg'] = '未停止接单状态的二维码，请手动查看并逐个停止';
            $returnData['result'] = 0;
        }
        return $returnData;
    }


    /**
     * 接单记录
     * @params  string  $mch_order_id       商户订单号               【非必填】
     * @params  string  $qr_code            二维码名称               【非必填】
     * @params  int     $order_type         收款码类型               【非必填】   1支付宝  2微信
     * @params  number  $startamount        订单金额-起始金额        【非必填】
     * @params  number  $endamount          订单金额-截止金额        【非必填】
     * @params  int     $order_status       订单状态                【非必填】    1未支付  2已支付  3超时  4手动失败   5手动成功
     * @params  string  $starttime          创建-起始时间           【非必填】    默认当天 00：00：00
     * @params  string  $endtime            创建-截止时间           【非必填】    默认当天 23：59：59
     * @params  int     $include_followers  是否包含下级            【非必填】    1包含  0不包含   默认0
     * @return  array
     */
    public function actionOrderrecords()
    {
        \Yii::info(json_encode($_POST, 256), 'Cashier_Orderrecords');
        $returnData = Common::ret();

        $searchModel = new OrderSearch();

        $data = $searchModel->search(\Yii::$app->request->bodyParams);

        if ($data && isset($data['data']) && $data['data']) {
            foreach ($data['data'] as &$order) {
                $order['status_name'] = isset(Order::$OrderStatusRel[$order['order_status']]) ? Order::$OrderStatusRel[$order['order_status']] : '';
                $order['order_type_name'] = isset(QrCode::$QrTypeRel[$order['order_type']]) ? QrCode::$QrTypeRel[$order['order_type']] : '';
            }
        }

        $returnData['result'] = is_array($data) ? 1 : 0;
        $returnData['msg'] = is_array($data) ? \Yii::t('app', 'succeed') : $data;
        $returnData['data'] = is_array($data) ? $data : array();

        return $returnData;
    }


    /**
     * 接单记录详情
     * @params int  $id     接单表自增id
     * @return array
     */
    public function actionOrderdetail()
    {
        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        if (!($params && isset($params['id']) && is_numeric($params['id']) && $params['id'] > 0 && intval($params['id']) == $params['id'])) {
            $returnData['msg'] = \Yii::t('app/error', 'param_error');
            return $returnData;
        }

        $orderData = Order::find()->where(array('id' => $params['id']))->asArray()->one();

        $returnData['result'] = $orderData ? 1 : 0;
        $returnData['msg'] = $orderData ? \Yii::t('app', 'succeed') : \Yii::t('app', 'no_data');
        $returnData['data'] = $orderData ? $orderData : array();

        return $returnData;
    }

    //资金交易明细 - 列表
    public function actionTransrecords()
    {
        $returnData = Common::ret();
        $searchModel = new FinanceDetailSearch();

        $data = $searchModel->search(array_merge(\Yii::$app->request->bodyParams, array('user_type' => FinanceDetail::$UserTypeCashier)));

        $returnData['result'] = is_array($data) ? 1 : 0;
        $returnData['msg'] = is_array($data) ? (isset($data['total']) && is_numeric($data['total']) && $data['total'] > 0 ? \Yii::t('app', 'succeed') : \Yii::t('app', 'no_data')) : '查询成功';
        $returnData['data'] = is_array($data) ? $data : array();

        return $returnData;
    }


    //个人信息
    public function actionUserinfo()
    {
        $returnData = Common::ret();
        $params = \Yii::$app->request->getBodyParams();

        /*$fields = 'id, username, income, invite_code, security_money, wechat_rate, alipay_rate, wechat_amount, alipay_amount, parent_name, wechat, alipay, telephone, agent_class, insert_at, login_at';

        $userData = Cashier::find()->select($fields)->where(array('username' => $params['username']))->asArray()->one();
        $returnData['result'] = $userData ? 1 : 0;
        $returnData['msg'] = $userData ? \Yii::t('app', 'succeed') : \Yii::t('app/error', 'user_not_found');
        $returnData['data'] = $userData ? $userData : array();
        return $returnData;*/

        $userInfo = Cashier::getUserInfo($params['username']);

        if ($userInfo) {
            $clearFields = array('login_password', 'pay_password');

            foreach ($clearFields as $field) {
                if (isset($userInfo[$field])) {
                    unset($userInfo[$field]);
                }
            }
        }

        $returnData['result'] = $userInfo ? 1 : 0;
        $returnData['msg'] = $userInfo ? \Yii::t('app', 'succeed') : \Yii::t('app/error', 'failed');
        $returnData['data'] = $userInfo;
        return $returnData;

    }


    /**
     * 修改登录/资金密码
     * @params  int         $pass_type      密码类型: 1登录密码， 2资金密码
     * @params  string      $old_pass       原密码
     * @params  string      $new_pass       新密码   (新密码格式 ：  登录密码为字符串， 最少6位， 最多16位；   资金密码只能为6位纯数字)
     * @params  string      $confirm_pass   确认新密码
     * @return  array
     * @throws \yii\db\Exception
     */
    public function actionChangepassword()
    {
        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;


        //数据基本校验
        if (!($params && isset($params['pass_type']) && $params['pass_type'] && in_array($params['pass_type'], array(1, 2)))) {
            $returnData['msg'] = \Yii::t('app/error', 'password_type_error');
            return $returnData;
        }

        if (!($params && isset($params['old_pass']) && $params['old_pass'])) {
            $returnData['msg'] = \Yii::t('app/error', 'old_password_required');
            return $returnData;
        }

        if (!($params && isset($params['new_pass']) && $params['new_pass'])) {
            $returnData['msg'] = \Yii::t('app/error', 'new_password_required');
            return $returnData;
        }

        if (!($params && isset($params['confirm_pass']) && $params['confirm_pass'])) {
            $returnData['msg'] = \Yii::t('app/error', 'confirm_password_required');
            return $returnData;
        }

        //根据密码类型， 验证新密码格式(登录密码为字符串， 最少6位， 最多16位；资金密码只能为6位纯数字)
        if ($params['pass_type'] == 1 && !(strlen($params['new_pass']) >= 6 && strlen($params['new_pass']) <= 16)) {
            $returnData['msg'] = \Yii::t('app/error', 'login_password_preg_error');
            return $returnData;
        }

        if ($params['pass_type'] == 2 && !preg_match(Cashier::$PayPassPreg, $params['new_pass'])) {
            $returnData['msg'] = \Yii::t('app/error', 'pay_password_preg_error');
            return $returnData;
        }

        //确认密码要与新密码一样
        if ($params['new_pass'] != $params['confirm_pass']) {
            $returnData['msg'] = \Yii::t('app/error', 'confirm_password_error');
            return $returnData;
        }

        //取用户信息，验证原密码
        $userData = Cashier::find()->select('login_password, pay_password')->where(array('username' => $params['username']))->asArray()->one();
        if (!$userData) {
            $returnData['msg'] = \Yii::t('app', 'user_not_found');
            return $returnData;
        }

        //根据密码类型，初始化用户输入的密码、数据库中的原密码，进行比对
        if ($params['pass_type'] == 1) {
            $oldPassHash = md5($params['old_pass']);            //加密过的用户填写的原密码
            $dbPassHash = $userData['login_password'];          //数据库中的密码
            $newPassHash = md5($params['new_pass']);            //加密过的用户填写的新密码
            $passwordField = 'login_password';                  //最终需要修改的密码字段
        } else if ($params['pass_type'] == 2) {
            $des = new DES(\Yii::$app->params['password'], 'DES-CBC', DES::OUTPUT_BASE64);
            $oldPassHash = $des->encrypt($params['old_pass']);
            $dbPassHash = $userData['pay_password'];
            $newPassHash = $des->encrypt($params['new_pass']);
            $passwordField = 'pay_password';
        } else {
            $oldPassHash = $dbPassHash = $newPassHash = $passwordField = '';
        }

        if (!$oldPassHash || !$dbPassHash) {
            $returnData['msg'] = \Yii::t('app/error', 'password_type_error');
            return $returnData;
        }

        //验证原密码是否正确
        if ($oldPassHash != $dbPassHash) {
            $returnData['msg'] = \Yii::t('app/error', 'old_password_error');
            return $returnData;
        }

        if (!$newPassHash || !$passwordField) {
            $returnData['msg'] = \Yii::t('app/error', 'password_type_error');
            return $returnData;
        }

        //执行修改
        $sql = 'update cashier set ' . $passwordField . '=:new_pass, update_at=:update_at where username=:username';
        $res = \Yii::$app->db->createCommand($sql, array(':new_pass' => $newPassHash, ':update_at' => date('Y-m-d H:i:s'), ':username' => $params['username']))->execute();

        //记录修改日志
        if ($res !== false) {
            \Yii::info(json_encode($params), 'changepassword');
        }

        $returnData['result'] = $res !== false ? 1 : 0;
        $returnData['msg'] = $res !== false ? \Yii::t('app', 'succeed') : \Yii::t('app', 'failed');

        return $returnData;
    }


    /**
     * 首次设置资金密码
     * @params  string  $pass   资金密码
     * @return  array
     * @throws \yii\db\Exception
     */
    public function actionSetpaypassword()
    {
        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        if (!($params && isset($params['pass']) && $params['pass'] && preg_match(Cashier::$PayPassPreg, $params['pass']))) {
            $returnData['msg'] = \Yii::t('app/error', 'pay_password_preg_error');
            return $returnData;
        }

        $des = new DES(\Yii::$app->params['password'], 'DES-CBC', DES::OUTPUT_BASE64);
        $newPassHash = $des->encrypt($params['pass']);

        //执行修改
        $sql = 'update cashier set pay_password=:new_pass, update_at=:update_at where username=:username';
        $res = \Yii::$app->db->createCommand($sql, array(':new_pass' => $newPassHash, ':update_at' => date('Y-m-d H:i:s'), ':username' => $params['username']))->execute();

        //记录修修改日志
        if ($res !== false) {
            \Yii::info(json_encode($params), 'setpaypassword');
        }

        $returnData['result'] = $res !== false ? 1 : 0;
        $returnData['msg'] = $res !== false ? \Yii::t('app', 'succeed') : \Yii::t('app', 'failed');

        return $returnData;

    }


    /**
     * 查询密码是否已设置
     * @return  array
     */
    public function actionCheckpassword()
    {
        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        $data = Cashier::find()->select('login_password, pay_password')->where(array('username' => $params['username']))->asArray()->one();
        if (!$data) {
            $returnData['msg'] = \Yii::t('app/error', 'user_not_found');
            return $returnData;
        }

        $issetLoginPassword = !empty($data['login_password']) ? 1 : 0;
        $issetPayPassword = !empty($data['pay_password']) ? 1 : 0;

        $returnData['result'] = 1;
        $returnData['msg'] = \Yii::t('app', 'succeed');
        $returnData['data'] = array('isset_login_password' => $issetLoginPassword, 'isset_pay_password' => $issetPayPassword);

        return $returnData;
    }


    /**
     * 修改个人信息
     * @params  int     $id
     */
    public function actionUpdate()
    {

        $returnData = Common::ret();
        try {
            \Yii::info($_POST, 'cashier/update');

            $params = \Yii::$app->request->bodyParams;

            //验证id
            if (!($params && isset($params['id']) && is_numeric($params['id']) && $params['id'] > 0 && intval($params['id']) == $params['id'])) {
                $returnData['msg'] = \Yii::t('app/error', 'param_error');
                return $returnData;
            }

            $cashier = Cashier::find()->where('id=:id and cashier_status=1', array('id' => $params['id']))->one();
            if (!$cashier) {
                $returnData['msg'] = \Yii::t('app/error', 'user_not_found');
                return $returnData;
            }

            $cashier->wechat = \Yii::$app->request->post('wechat', $cashier->wechat);
            $cashier->alipay = \Yii::$app->request->post('alipay', $cashier->alipay);

            //login_password  ?

            if (isset($params['pay_password']) && preg_match(Cashier::$PayPassPreg, $params['pay_password'])) {
                $des = new DES(\Yii::$app->params['password'], 'DES-CBC', DES::OUTPUT_BASE64);
                $cashier->pay_password = $des->encrypt($params['pay_password']);
            }
            $cashier->telephone = isset($params['telephone']) && preg_match(Cashier::$PhonePreg, $params['telephone']) ? $params['telephone'] : $cashier->telephone;
            $cashier->update_at = date('Y-m-d H:i:s');

            $res = $cashier->save();

            $returnData['result'] = $res ? 1 : 0;
            $returnData['msg'] = $res ? \Yii::t('app', 'succeed') : \Yii::t('app', 'failed');
            return $returnData;

        } catch (\Exception $e) {
            $returnData['result'] = 0;
            $returnData['msg'] = \Yii::t('app/error', 'failed') . ':' . $e->getMessage();
        }

        return $returnData;
    }


    /**
     * 接单量排行榜  前10
     */
    public function actionOrderrank()
    {
        $returnData = Common::ret();

        $rankData = Order::find()->select('count(`id`) `total` , `username`')->where('order_status in (' . Order::$OrderStatusPaid . ',' . Order::$OrderStatusMSucceed . ')')->groupBy('username')->orderBy('count(`id`) DESC')->limit(10)->asArray()->all();

        $returnData['result'] = $rankData ? 1 : 0;
        $returnData['msg'] = $rankData ? '获取成功' : '暂无数据';
        $returnData['data'] = $rankData ? $rankData : array();

        return $returnData;
    }


    /**
     * 收益排行榜  前10
     */
    public function actionIncomerank()
    {
        $returnData = Common::ret();

        $rankData = Cashier::find()->select('sum(`income`) `total` , `username`')->groupBy('username')->orderBy('sum(`income`) DESC')->limit(10)->asArray()->all();

        $returnData['result'] = $rankData ? 1 : 0;
        $returnData['msg'] = $rankData ? \Yii::t('app', 'succeed') : \Yii::t('app', 'no_data');
        $returnData['data'] = $rankData ? $rankData : array();

        return $returnData;
    }

    /**
     * @return array
     * 用户银行卡列表
     */
    public function actionUserBanks()
    {
        try {
            \Yii::info(json_encode($_POST, 256), 'Cashier/UserBanks');
            $ret = Common::ret();
            $username = \Yii::$app->request->post('username');
            $user_type = \Yii::$app->request->post('user_type');
            $banks = UserBankcard::queryUserBankcard($username, $user_type);
            if (!$banks) {
                $ret['msg'] = \Yii::t('app/error', 'no_bankcards');
                return $ret;
            } else {
                $ret['msg'] = \Yii::t('app', 'succeed');
                $ret['result'] = 1;
                $ret['data'] = $banks;
                return $ret;
            }
        } catch (\Exception $e) {
            \Yii::info(json_encode(['data' => $_POST, 'msg' => $e->getMessage()], 256), 'Cashier/UserBanks_error');
            $ret['msg'] = \Yii::t('app/error', 'exception');
            return $ret;
        }
    }

    /**
     * @return array
     * 添加用户银行卡列表
     */
    public function actionAddBank()
    {
        try {
            \Yii::info(json_encode($_POST, 256), 'Cashier/AddBank');
            $ret = Common::ret();
            $data['username'] = \Yii::$app->request->post('username');

            $lockKey = $data['username'] . 'AddBank';
            $isContinue = Common::redisLock($lockKey, 3);
            if ($isContinue === false) {
                $returnData['result'] = 0;
                $returnData['msg'] = '操作频繁，3秒后再试';
                return $returnData;
            }

            $data['user_type'] = \Yii::$app->request->post('user_type');
            $data['bankcard_number'] = \Yii::$app->request->post('bankcard_number');
            $data['bankcard_owner'] = \Yii::$app->request->post('bankcard_owner');
            $data['bank_code'] = \Yii::$app->request->post('bank_code');
            $data['bankcard_address'] = \Yii::$app->request->post('bankcard_address');

            //验证卡号粗略验证
            if (!is_numeric($data['bankcard_number']) || strlen($data['bankcard_number']) < 15) {
                $ret['msg'] = \Yii::t('app/error', 'bankcard_number_error');
                return $ret;
            }

            //银行类型验证
            $configBankTypes = \Yii::t('app', 'BankTypes');
            if ($configBankTypes) {
                if (!($data['bank_code'] && isset($configBankTypes[strtoupper($data['bank_code'])]))) {
                    $ret['msg'] = \Yii::t('app/error', 'bank_type_error');
                    return $ret;
                }
            }

            //检查用户银行卡数量是否超过上限
            $cards = UserBankcard::find()->where(['username' => $data['username'], 'user_type' => $data['user_type']])->andWhere(['<', 'card_status', 9])->count();
            $number = SystemConfig::getSystemConfig('UserBankcardLimit');
            $number = $number == null ? 10 : $number;
            if ($cards >= $number) {
                $ret['msg'] = \Yii::t('app/error', 'over_bankcards_limit');
                return $ret;
            }
            $msg = UserBankcard::addBankcard($data);
            if ($msg != 1) {
                $ret['msg'] = $msg;
                return $ret;
            } else {
                $ret['msg'] = \Yii::t('app', 'succeed');
                $ret['result'] = 1;
                $ret['data'] = $data;
                return $ret;
            }
        } catch (\Exception $e) {
            \Yii::info(json_encode(['data' => $_POST, 'msg' => $e->getMessage()], 256), 'Cashier/AddBank_error');
            $ret['msg'] = \Yii::t('app/error', 'exception');
            return $ret;
        }
    }

    /**
     * @return array
     * 修改用户银行卡列表
     */
    public function actionUpdateBank()
    {
        try {
            \Yii::info(json_encode($_POST, 256), 'Cashier/UpdateBank');
            $ret = Common::ret();
            $id = \Yii::$app->request->post('bank_id');
            $data['username'] = \Yii::$app->request->post('username');

            $lockKey = $data['username'] . 'UpdateBank';
            $isContinue = Common::redisLock($lockKey, 3);
            if ($isContinue === false) {
                $returnData['result'] = 0;
                $returnData['msg'] = '操作频繁，3秒后再试';
                return $returnData;
            }

            $data['user_type'] = \Yii::$app->request->post('user_type');
            $data['bankcard_number'] = \Yii::$app->request->post('bankcard_number');
            $data['bankcard_owner'] = \Yii::$app->request->post('bankcard_owner');
            $data['bank_code'] = \Yii::$app->request->post('bank_code');
            $data['bankcard_address'] = \Yii::$app->request->post('bankcard_address');

            //验证卡号粗略验证
            if (!is_numeric($data['bankcard_number']) || strlen($data['bankcard_number']) < 15) {
                $ret['msg'] = \Yii::t('app/error', 'bankcard_number_error');
                return $ret;
            }

            //银行类型验证
            $configBankTypes = \Yii::t('app', 'BankTypes');
            if ($configBankTypes) {
                if (!($data['bank_code'] && isset($configBankTypes[strtoupper($data['bank_code'])]))) {
                    $ret['msg'] = \Yii::t('app/error', 'bank_type_error');
                    return $ret;
                }
            }


            $msg = UserBankcard::updateAll($data, ['id' => $id]);
            if (!$msg) {
                $ret['msg'] = \Yii::t('app', 'failed');
                return $ret;
            } else {
                $ret['msg'] = \Yii::t('app/error', 'succeed');
                $ret['result'] = 1;
                $ret['data'] = $data;
                return $ret;
            }
        } catch (\Exception $e) {
            \Yii::info(json_encode(['data' => $_POST, 'msg' => $e->getMessage()], 256), 'Cashier/UpdateBank_error');
            $ret['msg'] = \Yii::t('app/error', 'exception');
            return $ret;
        }
    }

    /**
     * @return array
     * 删除用户银行卡列表
     */
    public function actionDeleteBank()
    {
        try {
            \Yii::info(json_encode($_POST, 256), 'Cashier/deleteBank');
            $ret = Common::ret();
            $username = \Yii::$app->request->post('username');
            $user_type = \Yii::$app->request->post('user_type');
            $bank_id = \Yii::$app->request->post('bank_id');
            $rows = UserBankcard::updateAll(['card_status' => 9], ['username' => $username, 'user_type' => $user_type, 'id' => $bank_id]);
            if (!$rows) {
                $ret['msg'] = \Yii::t('app/error', 'failed');
                return $ret;
            } else {
                $ret['msg'] = \Yii::t('app', 'succeed');
                $ret['result'] = 1;
                return $ret;
            }
        } catch (\Exception $e) {
            $ret['msg'] = \Yii::t('app/error', 'exception');
            \Yii::info(json_encode(['data' => $_POST, 'msg' => $e->getMessage()], 256), 'Cashier/deleteBank_error');
            return $ret;
        }
    }

    /**
     * @return array
     * 银行简称列表
     */
    public function actionBankCode()
    {
        $codes = \Yii::t('app', 'BankTypes');
        $ret = Common::ret();
        $ret['result'] = 1;
        $ret['msg'] = \Yii::t('app', 'succeed');
        $ret['data'] = $codes;
        return $ret;
    }


    /**
     * 可接单额度转换(保证金额度、微信、支付宝等各额度互转)
     * @params  string          $from       要转出的额度类型 : security wechat  alipay
     * @params  string          $to         要转入的额度类型 : security wechat  alipay
     * @params  number          $amount     转换额度
     * @return  array
     */
    public function actionTransquota()
    {
        $returnData = Common::ret();
        $params = Yii::$app->request->post();
        Yii::info(json_encode($params, 256), 'Cashier_Transquota_Params');
        $lockKey = $params['username'] . 'Transquota';
        $isContinue = Common::redisLock($lockKey, 3);
        if ($isContinue === false) {
            $returnData['result'] = 0;
            $returnData['msg'] = '操作频繁，3秒后再试';
            return $returnData;
        }

        /*if ($params['from'] == 'alipay' || $params['from'] == 'wechat') {
            $returnData['msg'] = '支付宝/微信额度不能转换其他额度，请联系平台！';
            return $returnData;
        }*/
        if ($params['from'] != 'security') {
            $returnData['msg'] = '非保证金额度不允许转出， 请联系平台客服处理!';
            return $returnData;
        }


        $transaction = \Yii::$app->db->beginTransaction();

        try {
            //必要数据有效性验证
            if (!($params && isset($params['from']) && $params['from'])) {
                $returnData['msg'] = \Yii::t('app/error', 'param_error');
                return $returnData;
            }
            if (!($params && isset($params['to']) && $params['to'] && $params['to'] != $params['from'])) {
                $returnData['msg'] = \Yii::t('app/error', 'param_error');
                return $returnData;
            }
            if (!($params && isset($params['amount']) && is_numeric($params['amount']) && $params['amount'] > 0)) {
                $returnData['msg'] = \Yii::t('app/error', 'param_error');
                return $returnData;
            }

            switch ($params['from']) {
                case 'security':
                    $fromFieldName = 'security_money';
                    $financeType1 = FinanceDetail::$FinanceTypeMargin;
                    $changeMoney1 = abs($params['amount']) * (-1);
                    $fromX = '保证金';
                    break;

                case 'alipay':
                    $fromFieldName = 'alipay_amount';
                    $financeType1 = FinanceDetail::$FinanceTypeAlipayReceivable;
                    $changeMoney1 = abs($params['amount']) * (-1);
                    $fromX = '支付宝额度';
                    break;

                case 'wechat':
                    $fromFieldName = 'wechat_amount';
                    $financeType1 = FinanceDetail::$FinanceTypeWechatReceivable;
                    $changeMoney1 = abs($params['amount']) * (-1);
                    $fromX = '微信额度';
                    break;

                case 'bank_card_amount':
                    $fromFieldName = 'bank_card_amount';
                    $financeType1 = 19;
                    $changeMoney1 = abs($params['amount']) * (-1);
                    $fromX = '银行卡额度';
                    break;

                case 'union_pay':
                    $fromFieldName = 'union_pay_amount';
                    $financeType1 = FinanceDetail::$FinanceTypeUnionPayReceivable;
                    $changeMoney1 = abs($params['amount']) * (-1);
                    $fromX = '云闪付额度';
                    break;

                default :
                    $fromFieldName = '';
                    $financeType1 = $changeMoney1 = 0;
            }

            switch ($params['to']) {
                case 'security':
                    $toFieldName = 'security_money';
                    $financeType2 = FinanceDetail::$FinanceTypeMargin;
                    $changeMoney2 = abs($params['amount']);
                    $toX = '保证金';
                    break;
                case 'alipay':
                    $toFieldName = 'alipay_amount';
                    $financeType2 = FinanceDetail::$FinanceTypeAlipayReceivable;
                    $changeMoney2 = abs($params['amount']);
                    $toX = '支付宝额度';
                    break;
                case 'wechat':
                    $toFieldName = 'wechat_amount';
                    $financeType2 = FinanceDetail::$FinanceTypeWechatReceivable;
                    $changeMoney2 = abs($params['amount']);
                    $toX = '微信额度';
                    break;
                case 'union_pay':
                    $toFieldName = 'union_pay_amount';
                    $financeType2 = FinanceDetail::$FinanceTypeUnionPayReceivable;
                    $changeMoney2 = abs($params['amount']);
                    $toX = '云闪付额度';
                    break;
                case 'bank_card_amount':
                    $toFieldName = 'bank_card_amount';
                    $financeType2 = 19;
                    $changeMoney2 = abs($params['amount']);
                    $toX = '银行卡额度';
                    break;
                default :
                    $toFieldName = '';
                    $financeType2 = $changeMoney2 = 0;
            }

            if (!($fromFieldName && $toFieldName && is_numeric($financeType1) && $financeType1 > 0 && is_numeric($changeMoney1) && $changeMoney1 != 0 && is_numeric($financeType2) && $financeType2 > 0 && is_numeric($changeMoney2) && $changeMoney2 != 0)) {
                $returnData['msg'] = \Yii::t('app/error', 'param_error');
                return $returnData;
            }

            //获取要转出的额度， 对比转换额度是否超出可转额度
            $cashierData = Cashier::find()->select('security_money,wechat_amount,alipay_amount,union_pay_amount,bank_card_amount')->where('username=:username', array(':username' => $params['username']))->asArray()->one();

            \Yii::info(json_encode(array('cashier_data' => $cashierData, 'params' => $params, 'from_field_quota' => $cashierData[$fromFieldName], 'to_field_quota' => $cashierData[$toFieldName]), 256), 'trans_quota_cashier_db_data');

            //获取转出类型额度出错
            if (!($cashierData && isset($cashierData[$fromFieldName]) && is_numeric($cashierData[$fromFieldName]))) {
                $returnData['msg'] = \Yii::t('app/error', 'data_error');
                return $returnData;
            }

            //转出类型额度不够
            if ($params['amount'] > $cashierData[$fromFieldName]) {
                $returnData['msg'] = \Yii::t('app/error', 'trans_out_quota_not_enough');
                return $returnData;
            }


            //写入转出额度的资金交易明细失败
            if (!FinanceDetail::financeCalc($params['username'], $financeType1, $changeMoney1, FinanceDetail::$UserTypeCashier, $fromX . '转出到' . $toX)) {
                throw new \Exception('trans out quota failed');
            }

            //写入转入额度的资金交易明细失败
            if (!FinanceDetail::financeCalc($params['username'], $financeType2, $changeMoney2, FinanceDetail::$UserTypeCashier, $fromX . '转入到' . $toX)) {
                throw new \Exception('trans in quota failed');
            }

            //执行转换
            $res = \Yii::$app->db->createCommand(
                "update cashier set `{$fromFieldName}`=`{$fromFieldName}`-:amount , `{$toFieldName}`=`{$toFieldName}`+:amount, update_at=:updatetime where username=:username and `{$fromFieldName}` >= :amount",
                array(
                    ':amount' => $params['amount'],
                    ':updatetime' => date('Y-m-d H:i:s'),
                    ':username' => $params['username']
                )
            )->execute();

            //修改额度失败
            if (!$res) {
                throw new \Exception('trans quota failed');
            }


            $transaction->commit();

            $returnData['result'] = 1;
            $returnData['msg'] = \Yii::t('app', 'succeed');
            return $returnData;

        } catch (\Exception $e) {
            $transaction->rollBack();
            $returnData['result'] = 0;
            $returnData['msg'] = $e->getMessage();
        }

        return $returnData;
    }


    /**
     * 一键回收额度 (将支付宝、微信等其他类型的额度全部转到保证金额度中)
     * @return array
     */
    public function actionRecycleallquotas()
    {
        $returnData['result'] = 0;
        $returnData['msg'] = '目前不允许回收额度';
        return $returnData;

        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        $lockKey = $params['username'] . 'Recycleallquotas';
        $isContinue = Common::redisLock($lockKey, 3);
        if ($isContinue === false) {
            $returnData['result'] = 0;
            $returnData['msg'] = '操作频繁，3秒后再试';
            return $returnData;
        }

        $userInfo = Cashier::find()->select('security_money, wechat_amount, alipay_amount')->where('username=:username', array(':username' => $params['username']))->asArray()->one();
        if (!($userInfo && isset($userInfo['security_money']) && is_numeric($userInfo['security_money']) && $userInfo['security_money'] >= 0 && isset($userInfo['wechat_amount']) && is_numeric($userInfo['wechat_amount']) && $userInfo['wechat_amount'] >= 0 && isset($userInfo['alipay_amount']) && is_numeric($userInfo['alipay_amount']) && $userInfo['alipay_amount'] >= 0)) {
            $returnData['result'] = 0;
            $returnData['msg'] = \Yii::t('app/error', 'data_error');
            return $returnData;
        }

        $transaction = \Yii::$app->db->beginTransaction();

        try {

            //写入各额度的资金交易明细记录

            if (!FinanceDetail::financeCalc($params['username'], FinanceDetail::$FinanceTypeWechatReceivable, abs($userInfo['wechat_amount']) * (-1), FinanceDetail::$UserTypeCashier, '微信额度回收到保证金')) {
                throw new \Exception('trans out quota failed 1');
            }

            if (!FinanceDetail::financeCalc($params['username'], FinanceDetail::$FinanceTypeAlipayReceivable, abs($userInfo['alipay_amount']) * (-1), FinanceDetail::$UserTypeCashier, '支付宝额度回收到保证金')) {
                throw new \Exception('trans out quota failed 2');
            }

            if (!FinanceDetail::financeCalc($params['username'], FinanceDetail::$FinanceTypeMargin, abs($userInfo['alipay_amount']) + abs($userInfo['wechat_amount']), FinanceDetail::$UserTypeCashier, '支付宝与微信额度回收到保证金')) {
                throw new \Exception('trans in quota failed');
            }

            //执行转换
            $res = \Yii::$app->db->createCommand(
                "update cashier set `security_money`=`security_money`+`wechat_amount`+`alipay_amount`, `wechat_amount`='0.00', `alipay_amount`='0.00', update_at=:updatetime where username=:username",
                array(
                    ':updatetime' => date('Y-m-d H:i:s'),
                    ':username' => $params['username']
                )
            )->execute();

            if (!$res) {
                throw new \Exception('trans quota failed');
            }

            $transaction->commit();

            $returnData['result'] = 1;
            $returnData['msg'] = \Yii::t('app', 'succeed');
            return $returnData;
        } catch (\Exception $e) {
            $transaction->rollBack();
            $returnData['result'] = 0;
            $returnData['msg'] = $e->getMessage();
        }
        return $returnData;
    }


    /**
     * 获取充值快捷金额 （后台配置一些充值金额返回给app展示）
     * @return array
     */
    public function actionGetdepositamounts()
    {

        $returnData = Common::ret();

        $configData = json_decode(SystemConfig::getSystemConfig('DepositConfigs'), true);
        $amounts = $configData && isset($configData['fast_amount']) && $configData['fast_amount'] ? $configData['fast_amount'] : array();

        $returnData['result'] = $amounts ? 1 : 0;
        $returnData['msg'] = $amounts ? \Yii::t('app', 'succeed') : \Yii::t('app/error', 'failed');
        $returnData['data'] = $amounts;

        return $returnData;
    }


    /**
     * 提交存款
     * @params      number      $deposit_money      存款金额
     */
    public function actionDeposit()
    {

        $returnData = Common::ret();
        $returnData['data']['url'] = '';

        $params = \Yii::$app->request->bodyParams;

        $params['username'] = trim($params['username']);
        $parent = Cashier::getFirstClass($params['username']);
        if ($parent == null) {
            $returnData['result'] = 0;
            $returnData['msg'] = '系统未查询到 ' . $params['username'] . ' 相关信息';
            return $returnData;
        }

//        $lockKey = $params['username'] . 'Deposit';
//        $isContinue = Common::redisLock($lockKey, 60);
//        if ($isContinue === false) {
//            $returnData['result'] = 0;
//            $returnData['msg'] = '一分钟内只能发起一次充值申请~';
//            return $returnData;
//        }

        $lockKey = $parent . 'Deposit';
        $isContinue = Common::redisLock($lockKey, 5);
        if ($isContinue === false) {
            $returnData['result'] = 0;
            $returnData['msg'] = '您前面正有人充值，请排队，稍后重试~';
            return $returnData;
        }

        \Yii::info(json_encode($params, JSON_UNESCAPED_UNICODE), '/cashier/deposit-params');

        //查询用户是否有初始状态的存款订单，防恶意提交
        if (Deposit::find()->where(['=', 'username', $params['username']])->andWhere(['=', 'deposit_status', 0])->one()) {
            $returnData['result'] = 0;
            $returnData['msg'] = \Yii::t('app/error', 'order_processing');
            return $returnData;
        }

        $depositLimit = Yii::$app->redis->get('depositLimit' . $parent);
        $depositLimit = $depositLimit == false ? 0 : $depositLimit;
        if ($depositLimit < $params['deposit_money']) {
            $returnData['result'] = 0;
            $returnData['msg'] = '您的团队充值额度只有 ' . $depositLimit . ' 元';
            return $returnData;
        }

        try {

            //验证用户是否有效性
            $userDbData = Cashier::find()->where("username=:username and cashier_status=1", array(':username' => $params['username']))->asArray()->one();
            if (!$userDbData) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'cashier_not_exists_or_status_invalid');
                return $returnData;
            }


            $model = new Deposit();
            $model->system_deposit_id = Deposit::generateSystemDepositOrderNumber();
            $model->deposit_status = 0;
            $model->insert_at = date('Y-m-d H:i:s');

            //'pay_type','client_type', 'bank_code', 'pay_name'
            $model->pay_type = 1;
            $model->client_type = 4;
            $model->bank_code = 'ABC';
            $model->pay_name = 'mashang';

            $model->setAttributes($params);

            $setMoney = json_decode(SystemConfig::getSystemConfig('DepositConfigs'), true);

            if ($model->deposit_money < $setMoney['min_amount'] || $model->deposit_money > $setMoney['max_amount']) {
                $returnData['result'] = 0;
                $returnData['msg'] = '充值金额必须在' . $setMoney['min_amount'] . '-' . $setMoney['max_amount'] . '之间';
                return $returnData;
            }

            if (!$model->validate()) {
                $errors = $model->getFirstErrors();
                $error = reset($errors);
                $returnData['result'] = 0;
                $returnData['msg'] = $error ? $error : \Yii::t('app/error', 'param_error');
                return $returnData;
            }

            //获取收款银行卡
            $deositBankCard = Deposit::getDepositBankcard($model, $params['username']);

            //无可用银行卡
            if (!($deositBankCard && isset($deositBankCard['bankcard_number']) && $deositBankCard['bankcard_number'])) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'no_available_channel');

                return $returnData;
            }


            //保存充值订单
            $model->handle_type = $deositBankCard['handle_type'];
            $model->system_bankcard_id = $deositBankCard['system_bankcard_id'];
            $model->system_remark = Deposit::generateSystemRemark();
            $model->out_deposit_id = $deositBankCard['out_deposit_id'];

            if ($model->save()) {

                //\Yii::$app->queue_cashier_deposit->push(new CashierDepositJob(array('orderModel' => $model)));

                $returnData['result'] = 1;
                $returnData['msg'] = 'succeed';

                /*$returnData['data'] = array(
                    'bankcard_number' => $deositBankCard['bankcard_number'],
                    'owner' => $deositBankCard['owner'],
                    'bankname' => $deositBankCard['bankname'],
                    'bank_address' => $deositBankCard['bank_address'],
                    'remark' => $model->system_remark,
                    'order_no' => $model->system_deposit_id,
                );*/

                $channelData = array(
                    'bank' => $deositBankCard['bankcard_number'],
                    'bank_code' => $deositBankCard['bank_code'],
                    'ownerName' => $deositBankCard['owner'],
                    'address' => $deositBankCard['bank_address'],
                );
                \Yii::$app->redis->setex('deposit_channel_data_' . $model->id, 1800, json_encode($channelData));

                $des = new DES(Yii::$app->params['counter_key'], 'DES-CBC', DES::OUTPUT_BASE64);
                $dataKey = $des->encrypt($model->id);

                $lastAmount = $depositLimit - $params['deposit_money'];
                Yii::$app->redis->setex('depositLimit' . $parent, 432000, $lastAmount);

                $returnData['data']['url'] = SystemConfig::getSystemConfig('ApiDomain') . '/site/counter?data=' . urlencode($dataKey);


            } else {
                $returnData['result'] = 0;
                $errors = $model->getFirstErrors();
                $firstError = reset($errors);
                $returnData['msg'] = $firstError ? $firstError : 'failed';
            }
            return $returnData;

        } catch (\Exception $e) {
            $returnData['result'] = 0;
            $returnData['msg'] = 'error :' . $e->getMessage();
        }
        return $returnData;

    }


    /**
     * 提交存款
     * @params      number      $deposit_money      存款金额
     * @params      number      $pay_type           存款方式
     * @params      string      $pay_name           付款人
     * @params      string      $bank_code          银行类型编码  ABC  ICBC     pay_type为1时， 必填 , 其余传空字符串
     * @params      number      $client_type        客户端类型
     * @params      string      $deposit_remark     用户充值备注    非必填
     */
    public function actionDepositNew()
    {

        $returnData = Common::ret();
        $returnData['data']['url'] = '';

        $params = \Yii::$app->request->bodyParams;

        $lockKey = $params['username'] . 'Deposit';
        $isContinue = Common::redisLock($lockKey, 3);
        if ($isContinue === false) {
            $returnData['result'] = 0;
            $returnData['msg'] = '操作频繁，3秒后再试';
            return $returnData;
        }

        \Yii::info(json_encode($params, JSON_UNESCAPED_UNICODE), '/cashier/deposit-new-params');

        $parent = Cashier::getFirstClass($params['username']);
        if ($parent == null) {
            $returnData['result'] = 0;
            $returnData['msg'] = '系统未查询到 ' . $params['username'] . ' 相关信息';
            return $returnData;
        }
        $depositLimit = Yii::$app->redis->get('depositLimit' . $parent);
        $depositLimit = $depositLimit == false ? 0 : $depositLimit;
        if ($depositLimit < $params['deposit_money']) {
            $returnData['result'] = 0;
            $returnData['msg'] = '您的团队充值额度只有 ' . $depositLimit . ' 元';
            return $returnData;
        }

        //验证用户是否有效性
        $userInfo = Cashier::find()->where("username=:username and cashier_status=1", array(':username' => $params['username']))->asArray()->one();
        if (!$userInfo) {
            \Yii::info(json_encode(array('user_data' => $userInfo, 'params' => $params), 256), '/cashier/deposit-new-user-_error');
            $returnData['result'] = 0;
            $returnData['msg'] = \Yii::t('app/error', 'cashier_not_exists_or_status_invalid');
            return $returnData;
        }


        try {
            $model = new Deposit();
            $model->system_deposit_id = Deposit::generateSystemDepositOrderNumber();
            $model->deposit_status = 0;
            $model->insert_at = date('Y-m-d H:i:s');

            $model->setAttributes($params);

            if (!$model->validate()) {
                $errors = $model->getFirstErrors();
                $error = reset($errors);
                $returnData['result'] = 0;
                $returnData['msg'] = $error ? $error : \Yii::t('app/error', 'param_error');
                return $returnData;
            }

            $extraData = array(
                'bank_code' => $model->pay_type == 1 ? $params['bank_code'] : '',
                'user_id' => $userInfo['id'],
                'username' => $userInfo['username'],
                'user_ip' => $params['userIp'],
                'deposit_remark' => isset($model->deposit_remark) && $model->deposit_remark ? $model->deposit_remark : '',
            );

            $requestData = array_merge($model->toArray(), $extraData);

            //提交充值订单
            $res = Deposit::sendDepositOrder($requestData);
            \Yii::info(json_encode($res, 256), 'deposit_third_create_result');


            //充值订单入库
            $model->handle_type = 1;
            $model->out_deposit_id = $res && isset($res['typay_order_id']) && $res['typay_order_id'] ? $res['typay_order_id'] : '';
            //$model->bank_code = $res && isset($res['bank_code']) && $res['bank_code'] ? $res['bank_code'] : '';
            $model->third_create_status = $res && isset($res['pay_message']) && $res['pay_message'] == 1 ? 1 : 0;
            $model->deposit_remark = isset($model->deposit_remark) ? $model->deposit_remark : '';
            $model->system_remark = $res && isset($res['pay_message']) && $res['pay_message'] == 1 ? '三方创建成功' : (isset($res['pay_message']) && $res['pay_message'] != 1 ? $res['pay_result'] : '');


            //根据支付方式来确定返回的收款渠道是要直接跳转还是需要拼凑展示收款渠道信息   （目前， pay_type 为114、115或 》=200 的直接跳转， 其他的需要拼凑）
            $channelData = array();

            if ($model->third_create_status == 1) {
                if ($params['pay_type'] == 114 || $params['pay_type'] == 115 || $params['pay_type'] >= 200) {

                    //直接跳转到外部url
                    $returnData['data']['url'] = $res['pay_result'];
                } else {
                    //需要自行做收银台展示收款信息
                    if (isset($res['pay_result']) && $res['pay_result']) {
                        $payChannelInfo = parse_url($res['pay_result']);
                        parse_str($payChannelInfo['query'], $channelData);

                        //收款银行卡号保存到充值订单信息中
                        if ($channelData && isset($channelData['bank']) && is_numeric($channelData['bank'])) {
                            $model->third_bank_account = $channelData['bank'];
                        }
                    }
                }
            }


            $res1 = $model->save();

            //双方订单均保存成功， 保存收款渠道信息到redis,  本方收银台展示时再取;    组合本方收银台url, 放到$returnData  url 中
            if ($res1 && $channelData) {

                $channelData['bank_code'] = isset($res['bank_code']) && $res['bank_code'] ? $res['bank_code'] : '';

                \Yii::$app->redis->setex('deposit_channel_data_' . $model->id, 1800, json_encode($channelData));

                $des = new DES(Yii::$app->params['counter_key'], 'DES-CBC', DES::OUTPUT_BASE64);
                $dataKey = $des->encrypt($model->id);
                $returnData['data']['url'] = SystemConfig::getSystemConfig('ApiDomain') . '/site/counter?data=' . urlencode($dataKey);
            }

            $returnData['result'] = $res1 && $model->third_create_status == 1 ? 1 : 0;
            $returnData['msg'] = $res1 && $model->third_create_status == 1 ? '订单提交成功' : (isset($res['pay_result']) && $res['pay_result'] ? $res['pay_result'] : '订单提交失败');

            $lastAmount = $depositLimit - $params['deposit_money'];
            Yii::$app->redis->setex('depositLimit' . $parent, 432000, $lastAmount);

            return $returnData;

        } catch (\Exception $e) {
            $returnData['result'] = 0;
            $returnData['msg'] = 'error :' . $e->getMessage();

            \Yii::error($e->getMessage(), 'deposit_new_exception');
        }
        return $returnData;

    }


    /**
     * 提交取款 (提款减扣用户保证金余额)
     * @params  number  $withdraw_money         取款金额
     * @params  string  $pay_password           资金密码
     * @params  int     $bankcard_id            银行卡id
     * @params  string  $withdraw_remark        用户提款备注  [非必填]
     */
    public function actionWithdraw()
    {

        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        $lockKey = $params['username'] . 'Withdraw';
        $isContinue = Common::redisLock($lockKey, 3);
        if ($isContinue === false) {
            $returnData['result'] = 0;
            $returnData['msg'] = '操作频繁，3秒后再试';
            return $returnData;
        }

        \Yii::info(json_encode($params, 256), '/cashier/withdraw-params');


        $transaction = \Yii::$app->db->beginTransaction();

        try {

            //验证用户是否有效性
            $userDbData = Cashier::find()->where("username=:username and cashier_status=1", array(':username' => $params['username']))->asArray()->one();
            if (!$userDbData) {
                \Yii::info(json_encode(array('user_data' => $userDbData, 'params' => $params), 256), '/cashier/withdraw-user-_error');
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'cashier_not_exists_or_status_invalid');
                return $returnData;
            }


            $model = new Withdraw();
            $model->system_withdraw_id = Withdraw::generateSystemWithdrawOrderNumber();
            $model->withdraw_status = 0;
            $model->insert_at = date('Y-m-d H:i:s');
            $model->user_type = Withdraw::$UserTypeCashier;

            $model->setAttributes($params);

            if (!$model->validate()) {
                $errors = $model->getFirstErrors();
                $error = reset($errors);
                $returnData['result'] = 0;
                $returnData['msg'] = $error ? $error : \Yii::t('app/error', 'param_error');
                return $returnData;
            }


            //查询用户是否有初始状态的取款订单，防恶意提交
            if (Withdraw::find()->select('id')->where('username=:username and user_type=2 and withdraw_status=0', array(':username' => $params['username']))->asArray()->one()) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'order_processing');
                return $returnData;
            }


            //获取配置的日最大提款次数及日最大提款金额
            $limitConfig = json_decode(SystemConfig::getSystemConfig('WithdrawConfigs'), true);
            $limitTimes = isset($limitConfig['max_daily_limit_times']) && is_numeric($limitConfig['max_daily_limit_times']) && $limitConfig['max_daily_limit_times'] > 0 ? intval($limitConfig['max_daily_limit_times']) : 0;
            $limitAmount = isset($limitConfig['max_daily_limit_amount']) && is_numeric($limitConfig['max_daily_limit_amount']) && $limitConfig['max_daily_limit_amount'] > 0 ? $limitConfig['max_daily_limit_amount'] : 0;

            //获取用户当天已成功提款次数及金额
            $dailyWithdrawStat = Withdraw::getCashierDailyWithdrawStat($params['username']);
            $succeedTimes = isset($dailyWithdrawStat['succeedTimes']) && is_numeric($dailyWithdrawStat['succeedTimes']) && $dailyWithdrawStat['succeedTimes'] > 0 ? intval($dailyWithdrawStat['succeedTimes']) : 0;
            $succeedAmount = isset($dailyWithdrawStat['succeedAmount']) && is_numeric($dailyWithdrawStat['succeedAmount']) && $dailyWithdrawStat['succeedAmount'] > 0 ? $dailyWithdrawStat['succeedAmount'] : 0;

            //日提款次数超限
            if ($limitTimes > 0 && $succeedTimes >= $limitTimes) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'daily_withdraw_times_over_limit_{limit}_{todayTimes}', ['limit' => $limitTimes, 'todayTimes' => $succeedTimes]);
                return $returnData;
            }

            //日提款金额超限
            if ($limitAmount > 0 && ($succeedAmount >= $limitAmount || $succeedAmount + abs($model->withdraw_money) >= $limitAmount)) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'daily_withdraw_amount_over_limit_{amount}_{todayAmount}', ['amount' => $limitAmount, 'todayAmount' => $succeedAmount]);
                return $returnData;
            }

            //查询银行卡信息
            $bankcardInfo = UserBankcard::find()->where('id=:id and user_type=:user_type', array(':id' => $params['bankcard_id'], ':user_type' => 2))->asArray()->one();
            if (!$bankcardInfo) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'bankcard_not_exists');
                return $returnData;
            }

            //验证当前提款银行卡是否是他自己的
            if ($bankcardInfo['username'] != $params['username']) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'illegal_bankcard');
                return $returnData;
            }

            //验证银行卡状态是否可用
            if (!in_array($bankcardInfo['card_status'], array(0, 1))) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'bankcard_not_available');
                return $returnData;
            }

            //计算取款手续费
            $handlingFee = Withdraw::calHandlingFee($params['withdraw_money']);

            //取用户信息，判断余额是否够提
            $userInfo = Cashier::getUserInfo($params['username']);
            if (!($userInfo && isset($userInfo['security_money']) && is_numeric($userInfo['security_money']))) {
                \Yii::error(json_encode(['userinfo' => $userInfo, 'params' => $params], 256), 'cashier/withdraw--userDataError');
                throw new \Exception('user data error');
            }
            if ($params['withdraw_money'] + abs($handlingFee) > $userInfo['security_money']) {
                \Yii::error(json_encode(['userinfo' => $userInfo, 'params' => $params], 256), 'cashier/withdraw--balanceNotEnough');
                throw new \Exception('balance not enough');
            }


            //验证用户是否设置了资金密码
            if (!$userInfo) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'user_not_found');
                return $returnData;
            }

            if (!$userInfo['pay_password']) {
                $returnData['result'] = -11;
                $returnData['msg'] = \Yii::t('app/error', 'no_pay_password');
                return $returnData;
            }

            //验证资金密码是否正确
            $des = new DES(\Yii::$app->params['password'], 'DES-CBC', DES::OUTPUT_BASE64);
            $passwordHash = $des->encrypt($params['pay_password']);
            if ($passwordHash != $userInfo['pay_password']) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'pay_password_error');
                return $returnData;
            }


            //写入取款订单
            $model->handling_fee = $handlingFee;
            if (!$model->save()) {
                \Yii::error(json_encode(['error_msg' => $model->getFirstErrors(), 'params' => $params], 256), 'cashier_withdraw__addOrderFailed');
                throw new \Exception('add order failed');
            }

            //写入资金交易明细--取款
            $financeDetailModel = new FinanceDetail(
                array(
                    'change_amount' => abs($params['withdraw_money']) * (-1),
                    'before_amount' => $userInfo['security_money'],
                    'after_amount' => $userInfo['security_money'] - $params['withdraw_money'],
                    'user_type' => FinanceDetail::$UserTypeCashier,
                    'username' => $params['username'],
                    'finance_type' => FinanceDetail::$FinanceTypeWithdraw,
                    'insert_at' => date('Y-m-d H:i:s'),
                    'remark' => FinanceDetail::$FinanceTypeRel[FinanceDetail::$FinanceTypeWithdraw],
                )
            );
            if (!$financeDetailModel->save()) {
                $errors = $financeDetailModel->getFirstErrors();
                $error = reset($errors);
                $error = $error ? 'add finance detail failed:' . $error : 'add finance detail failed';
                \Yii::error(json_encode(['error_msg' => $financeDetailModel->getFirstErrors(), 'params' => $params], 256), 'cashier_withdraw_addFinanceDetailFailed');
                throw new \Exception($error);
            }

            //写入资金交易明细--取款手续费
            if ($handlingFee > 0) {
                $financeDetailModel1 = new FinanceDetail(
                    array(
                        'change_amount' => $handlingFee * (-1),
                        'before_amount' => $userInfo['security_money'] - $params['withdraw_money'],
                        'after_amount' => $userInfo['security_money'] - $params['withdraw_money'] - $handlingFee,
                        'user_type' => FinanceDetail::$UserTypeCashier,
                        'username' => $params['username'],
                        'finance_type' => FinanceDetail::$FinanceTypeHandlingFee,
                        'insert_at' => date('Y-m-d H:i:s'),
                        'remark' => FinanceDetail::$FinanceTypeRel[FinanceDetail::$FinanceTypeHandlingFee],
                    )
                );
                if (!$financeDetailModel1->save()) {
                    $errors = $financeDetailModel1->getFirstErrors();
                    $error = reset($errors);
                    $error = $error ? 'add finance detail failed:' . $error : 'add finance detail failed';
                    \Yii::error(json_encode(['error_msg' => $financeDetailModel1->getFirstErrors(), 'params' => $params], 256), 'cashier_withdraw_addFinanceDetailFailed1');
                    throw new \Exception($error);
                }
            }


            //减扣相关余额
            $res = \Yii::$app->db->createCommand(
                'update cashier set security_money=security_money-:withdraw_amount-:withdraw_fee, update_at=:update_at where username=:username',
                array(
                    ':withdraw_amount' => $params['withdraw_money'],
                    ':withdraw_fee' => $handlingFee,
                    ':update_at' => date('Y-m-d H:i:s'),
                    ':username' => $params['username']
                )
            )->execute();

            if (!$res) {
                \Yii::error(json_encode(['userInfo' => $userInfo, 'params' => $params], 256), 'cashier_withdraw_updateCashierBalanceFailed');
                throw new \Exception('update cashier balance failed');
            }


            $transaction->commit();

            //\Yii::$app->queue_cashier_withdraw->push(new CashierWithdrawJob(array('orderModel' => $model)));

            $returnData['result'] = 1;
            $returnData['msg'] = 'succeed';
            $returnData['data'] = array(
                'order_number' => $model->system_withdraw_id,
            );
            return $returnData;

        } catch (\Exception $e) {
            $transaction->rollBack();
            $returnData['result'] = 0;
            $returnData['msg'] = 'error :' . $e->getMessage();
        }
        return $returnData;

    }


    /**
     * 提交取款 (提款减扣用户保证金余额)
     * @params  number  $withdraw_money         取款金额
     * @params  string  $pay_password           资金密码
     * @params  int     $bankcard_id            银行卡id
     * @params  string  $withdraw_remark        用户提款备注   非必填
     */
    public function actionWithdrawNew111()
    {

        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        $lockKey = $params['username'] . 'Withdraw';
        $isContinue = Common::redisLock($lockKey, 3);
        if ($isContinue === false) {
            $returnData['result'] = 0;
            $returnData['msg'] = '操作频繁，3秒后再试';
            return $returnData;
        }

        \Yii::info(json_encode($params, 256), '/cashier/withdraw-new-params');


        $transaction = \Yii::$app->db->beginTransaction();

        try {

            //验证用户是否有效性
            $userDbData = Cashier::find()->where("username=:username and cashier_status=1", array(':username' => $params['username']))->asArray()->one();
            if (!$userDbData) {
                \Yii::info(json_encode(array('user_data' => $userDbData, 'params' => $params), 256), '/cashier/withdraw-new-user-_error');
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'cashier_not_exists_or_status_invalid');
                return $returnData;
            }


            $model = new Withdraw();
            $model->system_withdraw_id = Withdraw::generateSystemWithdrawOrderNumber();
            $model->withdraw_status = 0;
            $model->insert_at = date('Y-m-d H:i:s');
            $model->user_type = Withdraw::$UserTypeCashier;
            $model->user_ip = $params['userIp'];

            $model->setAttributes($params);

            if (!$model->validate()) {

                $transaction->rollback();

                $errors = $model->getFirstErrors();
                $error = reset($errors);
                $returnData['result'] = 0;
                $returnData['msg'] = $error ? $error : \Yii::t('app/error', 'param_error');

                \Yii::info(json_encode(array('error' => $error, 'params' => $params), 256), 'withdraw_model_validate_error');

                return $returnData;
            }


            //查询用户是否有初始状态的取款订单，防恶意提交
            /*if (Withdraw::find()->select('id')->where('username=:username and user_type=2 and withdraw_status=0', array(':username' => $params['username']))->asArray()->one()) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'order_processing');
                return $returnData;
            }*/


            //获取配置的日最大提款次数及日最大提款金额、 单笔最小、最大金额
            $limitConfig = json_decode(SystemConfig::getSystemConfig('WithdrawConfigs'), true);
            $limitTimes = isset($limitConfig['max_daily_limit_times']) && is_numeric($limitConfig['max_daily_limit_times']) && $limitConfig['max_daily_limit_times'] > 0 ? intval($limitConfig['max_daily_limit_times']) : 0;
            $limitAmount = isset($limitConfig['max_daily_limit_amount']) && is_numeric($limitConfig['max_daily_limit_amount']) && $limitConfig['max_daily_limit_amount'] > 0 ? $limitConfig['max_daily_limit_amount'] : 0;
            $minAmoutPerTime = isset($limitConfig['min_amount']) && is_numeric($limitConfig['min_amount']) && $limitConfig['min_amount'] > 0 ? $limitConfig['min_amount'] : 0;
            $maxAmoutPerTime = isset($limitConfig['max_amount']) && is_numeric($limitConfig['max_amount']) && $limitConfig['max_amount'] > 0 ? $limitConfig['max_amount'] : 0;


            //获取用户当天已成功提款次数及金额
            $dailyWithdrawStat = Withdraw::getCashierDailyWithdrawStat($params['username']);
            $succeedTimes = isset($dailyWithdrawStat['succeedTimes']) && is_numeric($dailyWithdrawStat['succeedTimes']) && $dailyWithdrawStat['succeedTimes'] > 0 ? intval($dailyWithdrawStat['succeedTimes']) : 0;
            $succeedAmount = isset($dailyWithdrawStat['succeedAmount']) && is_numeric($dailyWithdrawStat['succeedAmount']) && $dailyWithdrawStat['succeedAmount'] > 0 ? $dailyWithdrawStat['succeedAmount'] : 0;

            //日提款次数超限
            if ($limitTimes > 0 && $succeedTimes >= $limitTimes) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'daily_withdraw_times_over_limit_{limit}_{todayTimes}', ['limit' => $limitTimes, 'todayTimes' => $succeedTimes]);

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_daily_times_limit');

                return $returnData;
            }

            //日提款金额超限
            if ($limitAmount > 0 && ($succeedAmount >= $limitAmount || $succeedAmount + abs($model->withdraw_money) >= $limitAmount)) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'daily_withdraw_amount_over_limit_{amount}_{todayAmount}', ['amount' => $limitAmount, 'todayAmount' => $succeedAmount]);

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_daily_amount_limit');

                return $returnData;
            }


            //单笔金额超限
            if (($minAmoutPerTime > 0 && $minAmoutPerTime > $model->withdraw_money) || ($maxAmoutPerTime > 0 && $maxAmoutPerTime < $model->withdraw_money)) {
                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = "单笔金额范围:{$minAmoutPerTime} - {$maxAmoutPerTime}";

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_pertime_amount_limit');

                return $returnData;
            }


            //查询银行卡信息
            $bankcardInfo = UserBankcard::find()->where('id=:id and user_type=:user_type', array(':id' => $params['bankcard_id'], ':user_type' => 2))->asArray()->one();
            if (!$bankcardInfo) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'bankcard_not_exists');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_user_bankcard_not_found');

                return $returnData;
            }

            //验证当前提款银行卡是否是他自己的
            if ($bankcardInfo['username'] != $params['username']) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'illegal_bankcard');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_other_bankcard');

                return $returnData;
            }

            //验证银行卡状态是否可用
            if (!in_array($bankcardInfo['card_status'], array(0, 1))) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'bankcard_not_available');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_bankcard_status_invalid');

                return $returnData;
            }

            //计算取款手续费
            $handlingFee = Withdraw::calHandlingFee($params['withdraw_money']);

            //取用户信息，判断余额是否够提
            $userInfo = Cashier::getUserInfo($params['username']);

            \Yii::info($params['username'] . '--' . $params['withdraw_money'] . '--' . $handlingFee . '--' . $userInfo['security_money'], 'withdraw_amounts');

            if (!($userInfo && isset($userInfo['security_money']) && is_numeric($userInfo['security_money']))) {
                \Yii::error(json_encode(['userinfo' => $userInfo, 'params' => $params], 256), 'cashier/withdraw--userDataError');
                throw new \Exception('user data error');
            }

            //额度不够提，提单金额为额度减掉手续费
            if ($params['withdraw_money'] + abs($handlingFee) > $userInfo['security_money']) {
                /*\Yii::error(json_encode(['userinfo' => $userInfo, 'params' => $params], 256), 'cashier/withdraw--balanceNotEnough');
                throw new \Exception('balance not enough');*/

                $realWithdrawMoney = $userInfo['security_money'] - abs($handlingFee);

                //再次验证单笔取款金额
                if (($minAmoutPerTime > 0 && $minAmoutPerTime > $realWithdrawMoney) || ($maxAmoutPerTime > 0 && $maxAmoutPerTime < $realWithdrawMoney)) {
                    \Yii::error(json_encode(['userinfo' => $userInfo, 'params' => $params, 'fee' => $handlingFee], 256), 'cashier/withdraw--pertime_amount_error');
                    throw new \Exception('balance not enough');
                }

                //重新赋值取款金额
                $model->withdraw_money = floor($realWithdrawMoney);
            }


            //验证用户是否设置了资金密码
            if (!$userInfo) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'user_not_found');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_userinfo_error');

                return $returnData;
            }

            if (!$userInfo['pay_password']) {

                $transaction->rollback();

                $returnData['result'] = -11;
                $returnData['msg'] = \Yii::t('app/error', 'no_pay_password');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_no_paypassword');

                return $returnData;
            }

            //验证资金密码是否正确
            $des = new DES(\Yii::$app->params['password'], 'DES-CBC', DES::OUTPUT_BASE64);
            $passwordHash = $des->encrypt($params['pay_password']);
            if ($passwordHash != $userInfo['pay_password']) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'pay_password_error');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_paypassword_incorrect');

                return $returnData;
            }


            //组合数据，提交到上游取款接口
            $postData = array(
                //'merchant_id'=>\Yii::$app->params['merchant_id'],
                'merchant_order_id' => $model->system_withdraw_id,
                'user_level' => 0,
                'pay_type' => 1,  //1银行卡转账，  888备付金转账
                'pay_amt' => sprintf('%.2f', $model->withdraw_money),
                'bank_code' => $bankcardInfo['bank_code'],
                'bank_num' => $bankcardInfo['bankcard_number'],
                'bank_owner' => $bankcardInfo['bankcard_owner'],
                'bank_address' => $bankcardInfo['bankcard_address'],
                'user_id' => $userInfo['id'],
                'user_ip' => $params['userIp'],
                'remark' => isset($model->withdraw_remark) && $model->withdraw_remark ? mb_substr($model->withdraw_remark, 0, 5) : '',
            );

            $postRes = Withdraw::sendWithdrawOrder($postData);

            \Yii::info(json_encode($postRes, 256), 'withdraw_post_order_res');

            //加入上游三方订单号
            if ($postRes && isset($postRes['pay_message']) && $postRes['pay_message'] == 1 && isset($postRes['typay_order_id']) && $postRes['typay_order_id']) {
                $model->out_withdraw_id = $postRes['typay_order_id'];
                $model->third_create_status = 1;
            }


            //写入取款订单
            $model->handling_fee = $handlingFee;
            if (!$model->save()) {
                \Yii::error(json_encode(['error_msg' => $model->getFirstErrors(), 'params' => $params], 256), 'cashier_withdraw__addOrderFailed');
                throw new \Exception('add order failed');
            }

            //减扣相关余额
            $res = \Yii::$app->db->createCommand(
                'update cashier set security_money=security_money-:withdraw_amount-:withdraw_fee, update_at=:update_at where username=:username',
                array(
                    ':withdraw_amount' => $model->withdraw_money,
                    ':withdraw_fee' => $handlingFee,
                    ':update_at' => date('Y-m-d H:i:s'),
                    ':username' => $params['username']
                )
            )->execute();

            if (!$res) {
                \Yii::error(json_encode(['userInfo' => $userInfo, 'params' => $params], 256), 'cashier_withdraw_updateCashierBalanceFailed');
                throw new \Exception('update cashier balance failed');
            }


            $transaction->commit();

            //\Yii::$app->queue_cashier_withdraw->push(new CashierWithdrawJob(array('orderModel' => $model)));

            $returnData['result'] = 1;
            $returnData['msg'] = 'succeed';
            $returnData['data'] = array(
                'order_number' => $model->system_withdraw_id,
            );
            return $returnData;

        } catch (\Exception $e) {
            $transaction->rollBack();
            $returnData['result'] = 0;
            $returnData['msg'] = 'error :' . $e->getMessage();
        }
        return $returnData;

    }


    /**
     * 提交取款 (提款减扣用户保证金余额)   --    后台配置取款订单自动提交到typay还是人工审核后再提交
     *
     * @params  number  $withdraw_money         取款金额
     * @params  string  $pay_password           资金密码
     * @params  int     $bankcard_id            银行卡id
     * @params  string  $withdraw_remark        用户提款备注   非必填
     */
    public function actionWithdrawNew()
    {

        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        $lockKey = $params['username'] . 'Withdraw';
        $isContinue = Common::redisLock($lockKey, 3);
        if ($isContinue === false) {
            $returnData['result'] = 0;
            $returnData['msg'] = '操作频繁，3秒后再试';
            return $returnData;
        }

        \Yii::info(json_encode($params, 256), '/cashier/withdraw-new-params');


        $transaction = \Yii::$app->db->beginTransaction();

        try {

            //验证用户是否有效性
            $userDbData = Cashier::find()->where("username=:username and cashier_status=1", array(':username' => $params['username']))->asArray()->one();
            if (!$userDbData) {
                \Yii::info(json_encode(array('user_data' => $userDbData, 'params' => $params), 256), '/cashier/withdraw-new-user-_error');
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'cashier_not_exists_or_status_invalid');
                return $returnData;
            }


            $model = new Withdraw();
            $model->system_withdraw_id = Withdraw::generateSystemWithdrawOrderNumber();
            $model->withdraw_status = 0;
            $model->insert_at = date('Y-m-d H:i:s');
            $model->user_type = Withdraw::$UserTypeCashier;
            $model->user_ip = $params['userIp'];

            $model->setAttributes($params);

            if (!$model->validate()) {

                $transaction->rollback();

                $errors = $model->getFirstErrors();
                $error = reset($errors);
                $returnData['result'] = 0;
                $returnData['msg'] = $error ? $error : \Yii::t('app/error', 'param_error');

                \Yii::info(json_encode(array('error' => $error, 'params' => $params), 256), 'withdraw_model_validate_error');

                return $returnData;
            }


            //查询用户是否有初始状态的取款订单，防恶意提交
            /*if (Withdraw::find()->select('id')->where('username=:username and user_type=2 and withdraw_status=0', array(':username' => $params['username']))->asArray()->one()) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'order_processing');
                return $returnData;
            }*/


            //获取配置的日最大提款次数及日最大提款金额、 单笔最小、最大金额
            $limitConfig = json_decode(SystemConfig::getSystemConfig('WithdrawConfigs'), true);
            $limitTimes = isset($limitConfig['max_daily_limit_times']) && is_numeric($limitConfig['max_daily_limit_times']) && $limitConfig['max_daily_limit_times'] > 0 ? intval($limitConfig['max_daily_limit_times']) : 0;
            $limitAmount = isset($limitConfig['max_daily_limit_amount']) && is_numeric($limitConfig['max_daily_limit_amount']) && $limitConfig['max_daily_limit_amount'] > 0 ? $limitConfig['max_daily_limit_amount'] : 0;
            $minAmoutPerTime = isset($limitConfig['min_amount']) && is_numeric($limitConfig['min_amount']) && $limitConfig['min_amount'] > 0 ? $limitConfig['min_amount'] : 0;
            $maxAmoutPerTime = isset($limitConfig['max_amount']) && is_numeric($limitConfig['max_amount']) && $limitConfig['max_amount'] > 0 ? $limitConfig['max_amount'] : 0;


            //获取用户当天已成功提款次数及金额
            $dailyWithdrawStat = Withdraw::getCashierDailyWithdrawStat($params['username']);
            $succeedTimes = isset($dailyWithdrawStat['succeedTimes']) && is_numeric($dailyWithdrawStat['succeedTimes']) && $dailyWithdrawStat['succeedTimes'] > 0 ? intval($dailyWithdrawStat['succeedTimes']) : 0;
            $succeedAmount = isset($dailyWithdrawStat['succeedAmount']) && is_numeric($dailyWithdrawStat['succeedAmount']) && $dailyWithdrawStat['succeedAmount'] > 0 ? $dailyWithdrawStat['succeedAmount'] : 0;

            //日提款次数超限
            if ($limitTimes > 0 && $succeedTimes >= $limitTimes) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'daily_withdraw_times_over_limit_{limit}_{todayTimes}', ['limit' => $limitTimes, 'todayTimes' => $succeedTimes]);

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_daily_times_limit');

                return $returnData;
            }

            //日提款金额超限
            if ($limitAmount > 0 && ($succeedAmount >= $limitAmount || $succeedAmount + abs($model->withdraw_money) >= $limitAmount)) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'daily_withdraw_amount_over_limit_{amount}_{todayAmount}', ['amount' => $limitAmount, 'todayAmount' => $succeedAmount]);

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_daily_amount_limit');

                return $returnData;
            }


            //单笔金额超限
            if (($minAmoutPerTime > 0 && $minAmoutPerTime > $model->withdraw_money) || ($maxAmoutPerTime > 0 && $maxAmoutPerTime < $model->withdraw_money)) {
                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = "单笔金额范围:{$minAmoutPerTime} - {$maxAmoutPerTime}";

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_pertime_amount_limit');

                return $returnData;
            }


            //查询银行卡信息
            $bankcardInfo = UserBankcard::find()->where('id=:id and user_type=:user_type', array(':id' => $params['bankcard_id'], ':user_type' => 2))->asArray()->one();
            if (!$bankcardInfo) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'bankcard_not_exists');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_user_bankcard_not_found');

                return $returnData;
            }

            //验证当前提款银行卡是否是他自己的
            if ($bankcardInfo['username'] != $params['username']) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'illegal_bankcard');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_other_bankcard');

                return $returnData;
            }

            //验证银行卡状态是否可用
            if (!in_array($bankcardInfo['card_status'], array(0, 1))) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'bankcard_not_available');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_bankcard_status_invalid');

                return $returnData;
            }

            //计算取款手续费
            $handlingFee = Withdraw::calHandlingFee($params['withdraw_money']);

            //取用户信息，判断余额是否够提
            $userInfo = Cashier::getUserInfo($params['username']);

            \Yii::info($params['username'] . '--' . $params['withdraw_money'] . '--' . $handlingFee . '--' . $userInfo['security_money'], 'withdraw_amounts');

            if (!($userInfo && isset($userInfo['security_money']) && is_numeric($userInfo['security_money']))) {
                \Yii::error(json_encode(['userinfo' => $userInfo, 'params' => $params], 256), 'cashier/withdraw--userDataError');
                throw new \Exception('user data error');
            }

            //额度不够提，提单金额为额度减掉手续费
            if ($params['withdraw_money'] + abs($handlingFee) > $userInfo['security_money']) {
                /*\Yii::error(json_encode(['userinfo' => $userInfo, 'params' => $params], 256), 'cashier/withdraw--balanceNotEnough');
                throw new \Exception('balance not enough');*/

                $realWithdrawMoney = $userInfo['security_money'] - abs($handlingFee);

                //再次验证单笔取款金额
                if (($minAmoutPerTime > 0 && $minAmoutPerTime > $realWithdrawMoney) || ($maxAmoutPerTime > 0 && $maxAmoutPerTime < $realWithdrawMoney)) {
                    \Yii::error(json_encode(['userinfo' => $userInfo, 'params' => $params, 'fee' => $handlingFee], 256), 'cashier/withdraw--pertime_amount_error');
                    throw new \Exception('balance not enough');
                }

                //重新赋值取款金额
                $model->withdraw_money = floor($realWithdrawMoney);
            }


            //验证用户是否设置了资金密码
            if (!$userInfo) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'user_not_found');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_userinfo_error');

                return $returnData;
            }

            if (!$userInfo['pay_password']) {

                $transaction->rollback();

                $returnData['result'] = -11;
                $returnData['msg'] = \Yii::t('app/error', 'no_pay_password');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_no_paypassword');

                return $returnData;
            }

            //验证资金密码是否正确
            $des = new DES(\Yii::$app->params['password'], 'DES-CBC', DES::OUTPUT_BASE64);
            $passwordHash = $des->encrypt($params['pay_password']);
            if ($passwordHash != $userInfo['pay_password']) {

                $transaction->rollback();

                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'pay_password_error');

                \Yii::info(json_encode(array('error' => $returnData['msg'], 'params' => $params), 256), 'withdraw_error_paypassword_incorrect');

                return $returnData;
            }


            //获取后台取款人工审核开关配置，若开启了人工审核，则不自动提交取款订单到typay
            $withdrawOrderCheck = SystemConfig::getSystemConfig('withdraw_order_check');
            $withdrawOrderCheck = is_numeric($withdrawOrderCheck) && in_array($withdrawOrderCheck, array(0, 1)) ? $withdrawOrderCheck : 1;

            //未开启取款订单人工审核， 则将取款订单提交到typay处理
            if ($withdrawOrderCheck == 0) {
                //组合数据，提交到上游取款接口
                $postData = array(
                    //'merchant_id'=>\Yii::$app->params['merchant_id'],
                    'merchant_order_id' => $model->system_withdraw_id,
                    'user_level' => 0,
                    'pay_type' => 1,  //1银行卡转账，  888备付金转账
                    'pay_amt' => sprintf('%.2f', $model->withdraw_money),
                    'bank_code' => $bankcardInfo['bank_code'],
                    'bank_num' => $bankcardInfo['bankcard_number'],
                    'bank_owner' => $bankcardInfo['bankcard_owner'],
                    'bank_address' => $bankcardInfo['bankcard_address'],
                    'user_id' => $userInfo['id'],
                    'user_ip' => $params['userIp'],
                    'remark' => isset($model->withdraw_remark) && $model->withdraw_remark ? mb_substr($model->withdraw_remark, 0, 5) : '',
                );

                $postRes = Withdraw::sendWithdrawOrder($postData);

                \Yii::info(json_encode($postRes, 256), 'withdraw_post_order_res');

                //加入上游三方订单号
                if ($postRes && isset($postRes['pay_message']) && $postRes['pay_message'] == 1 && isset($postRes['typay_order_id']) && $postRes['typay_order_id']) {
                    $model->out_withdraw_id = $postRes['typay_order_id'];
                    $model->third_create_status = 1;
                }
            }


            //写入取款订单
            $model->handling_fee = $handlingFee;
            if (!$model->save()) {
                \Yii::error(json_encode(['error_msg' => $model->getFirstErrors(), 'params' => $params], 256), 'cashier_withdraw__addOrderFailed');
                throw new \Exception('add order failed');
            }


            //写入资金交易明细--取款
            $financeDetailModel = new FinanceDetail(
                array(
                    'change_amount' => abs($params['withdraw_money']) * (-1),
                    'before_amount' => $userInfo['security_money'],
                    'after_amount' => $userInfo['security_money'] - $params['withdraw_money'],
                    'user_type' => FinanceDetail::$UserTypeCashier,
                    'username' => $params['username'],
                    'finance_type' => FinanceDetail::$FinanceTypeWithdraw,
                    'insert_at' => date('Y-m-d H:i:s'),
                    'remark' => FinanceDetail::$FinanceTypeRel[FinanceDetail::$FinanceTypeWithdraw],
                )
            );
            if (!$financeDetailModel->save()) {
                $errors = $financeDetailModel->getFirstErrors();
                $error = reset($errors);
                $error = $error ? 'add finance detail failed:' . $error : 'add finance detail failed';
                \Yii::error(json_encode(['error_msg' => $financeDetailModel->getFirstErrors(), 'params' => $params], 256), 'cashier_withdraw_new_addFinanceDetailFailed');
                throw new \Exception($error);
            }

            //写入资金交易明细--取款手续费
            if ($handlingFee > 0) {
                $financeDetailModel1 = new FinanceDetail(
                    array(
                        'change_amount' => $handlingFee * (-1),
                        'before_amount' => $userInfo['security_money'] - $params['withdraw_money'],
                        'after_amount' => $userInfo['security_money'] - $params['withdraw_money'] - $handlingFee,
                        'user_type' => FinanceDetail::$UserTypeCashier,
                        'username' => $params['username'],
                        'finance_type' => FinanceDetail::$FinanceTypeHandlingFee,
                        'insert_at' => date('Y-m-d H:i:s'),
                        'remark' => FinanceDetail::$FinanceTypeRel[FinanceDetail::$FinanceTypeHandlingFee],
                    )
                );
                if (!$financeDetailModel1->save()) {
                    $errors = $financeDetailModel1->getFirstErrors();
                    $error = reset($errors);
                    $error = $error ? 'add finance detail failed:' . $error : 'add finance detail failed';
                    \Yii::error(json_encode(['error_msg' => $financeDetailModel1->getFirstErrors(), 'params' => $params], 256), 'cashier_withdraw_new_addFinanceDetailFailed1');
                    throw new \Exception($error);
                }
            }


            //减扣相关余额
            $res = \Yii::$app->db->createCommand(
                'update cashier set security_money=security_money-:withdraw_amount-:withdraw_fee, update_at=:update_at where username=:username',
                array(
                    ':withdraw_amount' => $model->withdraw_money,
                    ':withdraw_fee' => $handlingFee,
                    ':update_at' => date('Y-m-d H:i:s'),
                    ':username' => $params['username']
                )
            )->execute();

            if (!$res) {
                \Yii::error(json_encode(['userInfo' => $userInfo, 'params' => $params], 256), 'cashier_withdraw_updateCashierBalanceFailed');
                throw new \Exception('update cashier balance failed');
            }


            $transaction->commit();

            //\Yii::$app->queue_cashier_withdraw->push(new CashierWithdrawJob(array('orderModel' => $model)));

            $returnData['result'] = 1;
            $returnData['msg'] = 'succeed';
            $returnData['data'] = array(
                'order_number' => $model->system_withdraw_id,
            );
            return $returnData;

        } catch (\Exception $e) {
            $transaction->rollBack();
            $returnData['result'] = 0;
            $returnData['msg'] = 'error :' . $e->getMessage();
        }
        return $returnData;

    }


    public function actionBindCashier()
    {
        try {
            \Yii::info(json_encode($_POST), 'BindCashier');
            $ret = Common::ret();
            $username = \Yii::$app->request->post('username');
            //区分不同角色
            $client_id = \Yii::$app->request->post('client_id');

            $cashier = Cashier::find()->where(['username' => $username])->one();
            $username = $username . '[cashier]';

            if (!$cashier) {
                $ret['msg'] = '用户不存在';
                \Yii::info(json_encode($_POST), 'BindCashier_noExsistUser');
                Gateway::unbindUid($client_id, $username);
                return $ret;
            }

            //client_id绑定用户名
            Gateway::bindUid($client_id, $username);
            //用户 群组   1平台  2商户  3收款员
            Gateway::joinGroup($client_id, 3);
            //不同代理等级 群组
            Gateway::joinGroup($client_id, 'cashier' . $cashier->agent_class);
            $ret['data'] = [$client_id, $username];
            $ret['msg'] = '用户绑定成功';
            $ret['result'] = 1;
            \Yii::info(json_encode($_POST), 'BindCashier_Ok');
            return $ret;
        } catch (\Exception $e) {
            \Yii::error($e->getFile() . '-' . $e->getMessage() . '-' . $e->getLine(), 'BindCashier_error');
        }
    }


    /**
     * 收款员推广链接
     */
    public function actionPromoteurl()
    {

        $params = \Yii::$app->request->bodyParams;
        $returnData = Common::ret();

        try {

            $cacheUserInfo = json_decode(\Yii::$app->redis->get('User_' . $params['token']), true);

            if (!($cacheUserInfo && isset($cacheUserInfo['username']) && $cacheUserInfo['username'])) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'data_error');
                return $returnData;
            }

            $userInfo = Cashier::getUserInfo($cacheUserInfo['username']);
            if (!($userInfo && isset($userInfo['invite_code']) && $userInfo['invite_code'])) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'data_error');
                return $returnData;
            }

            $returnData['result'] = 1;
            $returnData['msg'] = \Yii::t('app', 'succeed');
            $returnData['data'] = array('url' => $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['SERVER_NAME'] . '/site/reg?p=' . $userInfo['invite_code']);
            return $returnData;
        } catch (\Exception $e) {
            \Yii::error($e->getMessage(), 'Promoteurl_error');
            $returnData['result'] = 0;
            $returnData['msg'] = \Yii::t('app/error', 'exception');
        }

        return $returnData;
    }


    /**
     * 收益转换为接单额度
     * @params  number  $amount         转换金额
     * @params  string  $to             要转入的额度类型 : security wechat  alipay
     * @return array
     */
    public function actionTransincometoquota()
    {

        $returnData['result'] = 0;
        $returnData['msg'] = '收益目前不允许转出';
        return $returnData;

        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;

        $lockKey = $params['username'] . 'Transincometoquota';
        $isContinue = Common::redisLock($lockKey, 3);
        if ($isContinue === false) {
            $returnData['result'] = 0;
            $returnData['msg'] = '操作频繁，3秒后再试';
            return $returnData;
        }

        \Yii::info(json_encode($params, 256), 'cashier_transincometoquota_params');

        $transaction = \Yii::$app->db->beginTransaction();

        try {
            $returnData['result'] = 0;
            $returnData['msg'] = '收益当前不允许转换';
            return $returnData;

            //验证转入的额度类型
            if (!(isset($params['to']) && in_array($params['to'], array('security', 'wechat', 'alipay')))) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'trans_in_quota_type_error');
                return $returnData;
            }

            //获取用户信息
            $userInfo = Cashier::getUserInfo($params['username']);
            \Yii::info(json_encode($userInfo, 256), 'cashier_transincometoquota_userinfo');
            if (!$userInfo) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'data_error');
                return $returnData;
            }

            //获取配置的最小转换金额
            $minTransAmount = SystemConfig::getSystemConfig('Min_Income_To_Quota_Trans_Amount');
            $minTransAmount = is_numeric($minTransAmount) && $minTransAmount > 0 ? $minTransAmount : 1;

            //验证转换金额参数
            if (!(isset($params['amount']) && is_numeric($params['amount']))) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'invalid_trans_amount');
                return $returnData;
            }

            //转换金额需不小于最小转换金额，且不大于用户当前收益
            if (!($params['amount'] >= $minTransAmount && $params['amount'] <= $userInfo['income'])) {
                $returnData['result'] = 0;
                $returnData['msg'] = \Yii::t('app/error', 'trans_income_amount_error_{min_trans_amount}', ['min_trans_amount' => $minTransAmount]);
                return $returnData;
            }


            //执行转换

            //转出信息
            $financeType1 = FinanceDetail::$FinanceTypeIncome;
            $changeMoney1 = abs($params['amount']) * (-1);
            $fromX = '收益';
            $fromFieldName = 'income';

            //转入信息
            switch ($params['to']) {
                case 'security':
                    $toFieldName = 'security_money';
                    $financeType2 = FinanceDetail::$FinanceTypeMargin;
                    $changeMoney2 = abs($params['amount']);
                    $toX = '保证金';
                    break;
                case 'alipay':
                    $toFieldName = 'alipay_amount';
                    $financeType2 = FinanceDetail::$FinanceTypeAlipayReceivable;
                    $changeMoney2 = abs($params['amount']);
                    $toX = '支付宝额度';
                    break;
                case 'wechat':
                    $toFieldName = 'wechat_amount';
                    $financeType2 = FinanceDetail::$FinanceTypeWechatReceivable;
                    $changeMoney2 = abs($params['amount']);
                    $toX = '微信额度';
                    break;
                default :
                    $toFieldName = '';
                    $financeType2 = $changeMoney2 = 0;
            }

            //写入转出额度的资金交易明细失败
            if (!FinanceDetail::financeCalc($params['username'], $financeType1, $changeMoney1, FinanceDetail::$UserTypeCashier, $fromX . '转出到' . $toX)) {
                throw new \Exception('trans out quota failed');
            }

            //写入转入额度的资金交易明细失败
            if (!FinanceDetail::financeCalc($params['username'], $financeType2, $changeMoney2, FinanceDetail::$UserTypeCashier, $fromX . '转入到' . $toX)) {
                throw new \Exception('trans in quota failed');
            }

            //执行转换
            $res = \Yii::$app->db->createCommand(
                "update cashier set `{$fromFieldName}`=`{$fromFieldName}`-:amount , `{$toFieldName}`=`{$toFieldName}`+:amount, update_at=:updatetime where username=:username",
                array(
                    ':amount' => abs($params['amount']),
                    ':updatetime' => date('Y-m-d H:i:s'),
                    ':username' => $params['username']
                )
            )->execute();

            //修改额度失败
            if (!$res) {
                throw new \Exception('trans quota failed');
            }


            $transaction->commit();

            $returnData['result'] = 1;
            $returnData['msg'] = \Yii::t('app', 'succeed');
            return $returnData;


        } catch (\Exception $e) {
            $transaction->rollBack();
            \Yii::error($e->getMessage(), 'cashier_transincometoquota_error');
            $returnData['result'] = 0;
            $returnData['msg'] = \Yii::t('app/error', 'error');
        }

        return $returnData;
    }


    /**
     * 充值 - 获取支付方式
     */
    public function actionGetpaytypes()
    {

        $returnData = Common::ret();
        $params = \Yii::$app->request->bodyParams;


        //获取用户信息
        $userInfo = Cashier::getUserInfo($params['username']);
        \Yii::info(json_encode($userInfo, 256), 'cashier_getpaytypes_userinfo');
        if (!$userInfo) {
            $returnData['result'] = 0;
            $returnData['msg'] = \Yii::t('app/error', 'data_error');
            return $returnData;
        }

        //组合参数，请求接口
        $sign = md5(strtolower("merchant_id=" . \Yii::$app->params['merchant_id'] . "&user_id=" . $userInfo['id'] . "&user_level=0&user_ip=" . $params['userIp'] . "&key=" . \Yii::$app->params['merchant_key']));
        $postData = array(
            'merchant_id' => \Yii::$app->params['merchant_id'],
            'user_id' => $userInfo['id'],
            'user_level' => 0,
            'client_type' => 4, // 1pc  2wap  4app
            'user_ip' => $params['userIp'],
            'sign' => $sign,
        );

        $apiUrl = \Yii::$app->params['typay_deposit_url'] . '/deposit/list';
        //$res = Common::curl($apiUrl, $postData);

        $res = Common::sendRequest($apiUrl, $postData);

        $res = json_decode($res, true);


        //正常拿到充值方式数据， 遍历数据，获取每个充值方式的名称
        if ($res && isset($res['pay_message']) && $res['pay_message'] == 1 && isset($res['pay_types']) && $res['pay_types']) {
            $returnData['result'] = 1;

            $configPayTypes = \Yii::t('app', 'PayTypes');
            foreach ($res['pay_types'] as $pk => $paytype) {
                $res['pay_types'][$pk]['pay_type_name'] = isset($configPayTypes[$paytype['pay_type_id']]) ? $configPayTypes[$paytype['pay_type_id']] : '充值渠道' . $paytype['pay_type_id'];
            }

            $returnData['data'] = $res['pay_types'];
        }

        return $returnData;
    }

}