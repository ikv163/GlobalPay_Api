<?php

namespace app\controllers;

use app\common\Common;
use app\models\Merchant;
use app\models\MerchantOrder;
use app\models\MerchantQuery;
use app\models\Order;
use app\models\QrCode;
use app\models\SystemConfig;
use Yii;
use yii\filters\VerbFilter;
use yii\web\Response;

class MerchantController extends \yii\web\Controller
{
    public $ret;

    public function init()
    {
        header("Access-Control-Allow-Origin: *");
        $this->ret = Common::ret();
        \Yii::$app->response->format = Response::FORMAT_JSON;
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    '*' => ['post'],
                    'order1' => ['get'],
                ],
            ],
        ];
    }


    public function beforeAction($action)
    {

        $queryParams = \Yii::$app->request->bodyParams;
        $redisUser = array();
        if (isset($queryParams['token']) && $queryParams['token']) {
            if (\Yii::$app->redis->get('User_' . $queryParams['token'])) {
                $redisUser = json_decode(\Yii::$app->redis->get('User_' . $queryParams['token']), true);
            }
        }


        //日志数据
        $logData = array(
            'uri' => \Yii::$app->controller->id . '_' . \Yii::$app->controller->action->id,  //请求的uri
            'query_params' => $queryParams,  //请求参数
            'client_ip' => Common::getClientIp(),  //用户ip
            'redis_user' => $redisUser,  //用户信息，  登录后才有
        );


        \Yii::info(json_encode($logData, 256), 'merchant_init_log');


        return parent::beforeAction($action);

    }

    //内部测试专用，测试商户号
    public function actionOrder1()
    {

        //验证参数是否正确
        $data = \Yii::$app->request->bodyParams;
        //模拟数据
        $data['mch_code'] = 'TestMch';
        $data['mch_order_id'] = 'TEST' . date('YmdHis');
        $data['order_type'] = $_GET['orderType'];
        $data['order_amount'] = isset($_GET['money']) ? $_GET['money'] : rand(100, 200);
        if (isset($_GET['user_level'])) {
            $data['user_level'] = $_GET['user_level'];
        }
        if (isset($_GET['user_credit_level'])) {
            $data['user_credit_level'] = $_GET['user_credit_level'];
        }
        $data['order_amount'] = isset($_GET['money']) ? $_GET['money'] : rand(100, 200);
        $data['callback_url'] = 'http://www.baidu.com';
        $data['notify_url'] = 'http://www.baidu.com';
        $data['order_time'] = date('Y-m-d H:i:s');
        $data['user_ip'] = isset($_GET['ip']) ? $_GET['ip'] : '183.63.255.255';
        $data['sign'] = Order::validateSign($data['mch_code'], $data)['sign'];

        try {
            //验证参数是否正确
            \Yii::info(json_encode(['data' => $data, 'time' => time()], 256), 'MerchantOrder');

            //拦截国外ip(功能配置开关)
            if (SystemConfig::getSystemConfig('IP_RESTRICT_SWITCH')) {
                if (isset($data['user_ip']) && $data['user_ip'] && !Order::checkOrderIPArea($data['user_ip'])) {
                    \Yii::info(json_encode($data, 256), 'ip_not_allowed');
                    $this->ret['msg'] = \Yii::t('app/error', 'area_restrict');
                    $this->ret['data'] = $data;
                    return $this->ret;
                }
            }

            //加入返回时间，得到密钥，作为返回数据
            $temp = $data;
            $temp['return_time'] = date('Y-m-d H:i:s');
            $temp['sign'] = Order::validateSign($data['mch_code'], $temp)['sign'];

            $order_type = $data['order_type'];
            if (in_array($temp['order_type'], [101, 102, 103, 104])) {
                $order_type = 4;
                if ((!isset($temp['user_level']) && !isset($temp['user_credit_level']))) {
                    $this->ret['msg'] = '用户等级/信用等级至少传递一个';
                    $this->ret['data'] = $data;
                    return $this->ret;
                }
            }

            $merchantOrder = new MerchantOrder();
            $merchantOrder->load($data, '');

            //默认返回的数据
            $this->ret['data'] = $temp;

            if (!($merchantOrder->validate())) {
                //数据验证不通过则返回验证信息
                $this->ret['msg'] = Common::getModelError($merchantOrder);
                \Yii::error(json_encode($data, 256), 'MerchantOrder_validateError');
                return $this->ret;
            }
            //一天内不能出现重复订单号(不管订单是否写入成功)
            $uniqueOrderId = trim($data['mch_order_id']) . $data['mch_code'];
            if (!(Common::redisLock($uniqueOrderId, 86400))) {
                $this->ret['msg'] = '重复订单号';
                \Yii::error(json_encode($data, 256), 'MerchantOrder_mchOrderIdNotUnique');
                return $this->ret;
            }

            //验签
            $mySign = Order::validateSign($data['mch_code'], $data);
            if ($mySign == null || $mySign['sign'] != $data['sign']) {
                $this->ret['msg'] = '验签失败';
                \Yii::error(json_encode($data, 256), 'MerchantOrder_signIsError');
                return $this->ret;
            }

            //判断金额是否在有效区间内
            if ($order_type == 3) {
                $maxMinMoney = json_decode(SystemConfig::getSystemConfig('UnionPay_PerMaxMin'), 1);
            } elseif ($order_type == 4) {
                $maxMinMoney = json_decode(SystemConfig::getSystemConfig('UnionPay_PerMaxMin'), 1);
            } else {
                $maxMinMoney = json_decode(SystemConfig::getSystemConfig('PerMaxMin'), 1);
            }
            if ($maxMinMoney == null) {
                $this->ret['msg'] = '订单支持的最大最小金额获取失败';
                \Yii::error(json_encode(['data' => $data, 'config' => $maxMinMoney], 256), 'MerchantOrder_defaultMaxMinMoney');
                return $this->ret;
            }
            if ($data['order_amount'] < $maxMinMoney['min'] || $data['order_amount'] > $maxMinMoney['max']) {
                $this->ret['msg'] = '订单金额必须在' . $maxMinMoney['min'] . '-' . $maxMinMoney['max'] . '之间';
                \Yii::error(json_encode($data, 256), 'MerchantOrder_orderAmountNotOk');
                return $this->ret;
            }

            //判断商户可提单总额是否足够
            $merchant = $mySign['merchant'];

            //根据配置的出码规则，寻找可接单的二维码
            $qrCodes = QrCode::selectQrCode($data);

            if ($qrCodes['result'] == 0) {
                $this->ret['msg'] = $qrCodes['msg'];
                \Yii::error(json_encode($data, 256), 'ChannelTooCrowded');
                return $this->ret;
            }
            $qrCodes = $qrCodes['data'];

            $res = null;

            //获取配置，二维码指定时间内能存在多少个订单
            $qrCodeOrderTimesLimit = json_decode(SystemConfig::getSystemConfig('QrCodeOrderTimesLimit'), 1);
            foreach ($qrCodes as $k => $qrCode) {
                $isLocked = Yii::$app->redis->setnx(($qrCode->qr_code) . 'Order', 1);
                if (!$isLocked) {
                    \Yii::info($qrCodeOrderTimesLimit['time'] . '分钟内已接订单_' . $qrCode->qr_code, 'CreateOrder11' . $data['mch_order_id']);
                    continue;
                } else {
                    Yii::$app->redis->expire(($qrCode->qr_code) . 'Order', $qrCodeOrderTimesLimit['time'] * 60);
                }
                //轮询符合条件的二维码，做入库操作,一旦写入成功即刻终止
                $res = Order::createOrder($data, $merchant, $qrCode);
                if (!$res) {
                    Yii::$app->redis->expire(($qrCode->qr_code) . 'Order', 1);
                }

                \Yii::info(json_encode(array('data' => $data, 'mch' => $merchant, 'qrcode' => $qrCode, 'res' => $res, 'time' => time()), 256), 'CreateOrderRes');

                if ($res === true) {
                    //记录出码时间
                    $qrCode->last_code_time = date('Y-m-d H:i:s');
                    $qrCode->save();

                    $this->ret['msg'] = '订单提交成功';

                    if ($order_type == 4) {
                        $temp['payAmt'] = $data['order_amount'];
                        $temp['bankNum'] = $qrCode->bank_card_number;
                        $temp['ownerName'] = $qrCode->real_name;
                        $temp['address'] = $qrCode->bank_address;
                        $temp['bankflag'] = $qrCode->bank_code;
                    }
                    $keyX = md5($temp['mch_code'] . $temp['mch_order_id'] . time());

                    //如果是支付宝渠道 ，优先使用支付宝好友红包付款， 启用另一个收银台
                    $counterUrlCacheKey = "PayUrl{$order_type}";
                    if ($order_type == 1) {
                        $alipayRedEnvelopSwitch = SystemConfig::getSystemConfig('AlipayRedEnvelopSwitch');
                        $counterUrlCacheKey = $alipayRedEnvelopSwitch ? "{$counterUrlCacheKey}_1" : $counterUrlCacheKey;
                    }
                    $payUrl = SystemConfig::getSystemConfig($counterUrlCacheKey);
                    $temp['pay_url'] = $payUrl . $keyX;

                    //订单保存到Redis
                    $temp['qr_address'] = $qrCode->qr_address;
                    $temp['mch_name'] = $merchant->mch_name;
                    $expire = SystemConfig::getSystemConfig('OrderExpireTime');
                    $temp['sign'] = Order::validateSign($temp['mch_code'], $temp)['sign'];
                    $this->ret['data'] = $temp;
                    $this->ret['result'] = 1;

                    Yii::$app->redis->setex($keyX, $expire * 60, json_encode($temp, 256));
                    Yii::info(json_encode(['data' => $this->ret, 'time' => time()], 256), 'Merchant_Order_Result_Yes');
                    return $this->ret;
                }
            }
            $this->ret['msg'] = '无码可用';
            Yii::info(json_encode($this->ret, 256), 'Merchant_Order_Result_No');
            return $this->ret;
        } catch (\Exception $e) {
            Yii::info($e->getMessage() . '-' . $e->getFile() . '-' . $e->getLine() . '--' . json_encode($data, 256), 'Merchant_Order_Error');
        }
    }

    /**
     * 接收商户的订单请求,分配二维码
     */
    public function actionOrder()
    {
        try {
            //验证参数是否正确
            $data = \Yii::$app->request->bodyParams;
            \Yii::info(json_encode(['data' => $data, 'time' => time()], 256), 'MerchantOrder');

            //拦截国外ip(功能配置开关)
            if (SystemConfig::getSystemConfig('IP_RESTRICT_SWITCH')) {
                if (isset($data['user_ip']) && $data['user_ip'] && !Order::checkOrderIPArea($data['user_ip'])) {
                    \Yii::info(json_encode($data, 256), 'ip_not_allowed');
                    $this->ret['msg'] = \Yii::t('app/error', 'area_restrict');
                    $this->ret['data'] = $data;
                    return $this->ret;
                }
            }

            //加入返回时间，得到密钥，作为返回数据
            $temp = $data;
            $temp['return_time'] = date('Y-m-d H:i:s');
            $temp['sign'] = Order::validateSign($data['mch_code'], $temp)['sign'];

            $order_type = $data['order_type'];
            if (in_array($temp['order_type'], [101, 102, 103, 104])) {
                $order_type = 4;
                if ((!isset($temp['user_level']) && !isset($temp['user_credit_level']))) {
                    $this->ret['msg'] = '用户等级/信用等级至少传递一个';
                    $this->ret['data'] = $data;
                    return $this->ret;
                }
            }

            $merchantOrder = new MerchantOrder();
            $merchantOrder->load($data, '');

            //默认返回的数据
            $this->ret['data'] = $temp;

            if (!($merchantOrder->validate())) {
                //数据验证不通过则返回验证信息
                $this->ret['msg'] = Common::getModelError($merchantOrder);
                \Yii::error(json_encode($data, 256), 'MerchantOrder_validateError');
                return $this->ret;
            }
            //一天内不能出现重复订单号(不管订单是否写入成功)
            $uniqueOrderId = trim($data['mch_order_id']) . $data['mch_code'];
            if (!(Common::redisLock($uniqueOrderId, 86400))) {
                $this->ret['msg'] = '重复订单号';
                \Yii::error(json_encode($data, 256), 'MerchantOrder_mchOrderIdNotUnique');
                return $this->ret;
            }

            //验签
            $mySign = Order::validateSign($data['mch_code'], $data);
            if ($mySign == null || $mySign['sign'] != $data['sign']) {
                $this->ret['msg'] = '验签失败';
                \Yii::error(json_encode($data, 256), 'MerchantOrder_signIsError');
                return $this->ret;
            }

            //判断金额是否在有效区间内
            if ($order_type == 3) {
                $maxMinMoney = json_decode(SystemConfig::getSystemConfig('UnionPay_PerMaxMin'), 1);
            } elseif ($order_type == 4) {
                $maxMinMoney = json_decode(SystemConfig::getSystemConfig('UnionPay_PerMaxMin'), 1);
            } else {
                $maxMinMoney = json_decode(SystemConfig::getSystemConfig('PerMaxMin'), 1);
            }
            if ($maxMinMoney == null) {
                $this->ret['msg'] = '订单支持的最大最小金额获取失败';
                \Yii::error(json_encode(['data' => $data, 'config' => $maxMinMoney], 256), 'MerchantOrder_defaultMaxMinMoney');
                return $this->ret;
            }
            if ($data['order_amount'] < $maxMinMoney['min'] || $data['order_amount'] > $maxMinMoney['max']) {
                $this->ret['msg'] = '订单金额必须在' . $maxMinMoney['min'] . '-' . $maxMinMoney['max'] . '之间';
                \Yii::error(json_encode($data, 256), 'MerchantOrder_orderAmountNotOk');
                return $this->ret;
            }

            //判断商户可提单总额是否足够
            $merchant = $mySign['merchant'];

            //根据配置的出码规则，寻找可接单的二维码
            $qrCodes = QrCode::selectQrCode($data);

            if ($qrCodes['result'] == 0) {
                $this->ret['msg'] = $qrCodes['msg'];
                \Yii::error(json_encode($data, 256), 'ChannelTooCrowded');
                return $this->ret;
            }
            $qrCodes = $qrCodes['data'];

            $res = null;

            //获取配置，二维码指定时间内能存在多少个订单
            $qrCodeOrderTimesLimit = json_decode(SystemConfig::getSystemConfig('QrCodeOrderTimesLimit'), 1);
            foreach ($qrCodes as $k => $qrCode) {
                $isLocked = Yii::$app->redis->setnx(($qrCode->qr_code) . 'Order', 1);
                if (!$isLocked) {
                    \Yii::info($qrCodeOrderTimesLimit['time'] . '分钟内已接订单_' . $qrCode->qr_code, 'CreateOrder11' . $data['mch_order_id']);
                    continue;
                } else {
                    Yii::$app->redis->expire(($qrCode->qr_code) . 'Order', $qrCodeOrderTimesLimit['time'] * 60);
                }
                //轮询符合条件的二维码，做入库操作,一旦写入成功即刻终止
                $res = Order::createOrder($data, $merchant, $qrCode);
                if (!$res) {
                    Yii::$app->redis->expire(($qrCode->qr_code) . 'Order', 1);
                }

                \Yii::info(json_encode(array('data' => $data, 'mch' => $merchant, 'qrcode' => $qrCode, 'res' => $res, 'time' => time()), 256), 'CreateOrderRes');

                if ($res === true) {
                    //记录出码时间
                    $qrCode->last_code_time = date('Y-m-d H:i:s');
                    $qrCode->save();

                    $this->ret['msg'] = '订单提交成功';

                    if ($order_type == 4) {
                        $temp['payAmt'] = $data['order_amount'];
                        $temp['bankNum'] = $qrCode->bank_card_number;
                        $temp['ownerName'] = $qrCode->real_name;
                        $temp['address'] = $qrCode->bank_address;
                        $temp['bankflag'] = $qrCode->bank_code;
                    }
                    $keyX = md5($temp['mch_code'] . $temp['mch_order_id'] . time());

                    //如果是支付宝渠道 ，优先使用支付宝好友红包付款， 启用另一个收银台
                    $counterUrlCacheKey = "PayUrl{$order_type}";
                    if ($order_type == 1) {
                        $alipayRedEnvelopSwitch = SystemConfig::getSystemConfig('AlipayRedEnvelopSwitch');
                        $counterUrlCacheKey = $alipayRedEnvelopSwitch ? "{$counterUrlCacheKey}_1" : $counterUrlCacheKey;
                    }
                    $payUrl = SystemConfig::getSystemConfig($counterUrlCacheKey);
                    $temp['pay_url'] = $payUrl . $keyX;

                    //订单保存到Redis
                    $temp['qr_address'] = $qrCode->qr_address;
                    $temp['mch_name'] = $merchant->mch_name;
                    $expire = SystemConfig::getSystemConfig('OrderExpireTime');
                    $temp['sign'] = Order::validateSign($temp['mch_code'], $temp)['sign'];
                    $this->ret['data'] = $temp;
                    $this->ret['result'] = 1;

                    Yii::$app->redis->setex($keyX, $expire * 60, json_encode($temp, 256));
                    Yii::info(json_encode(['data' => $this->ret, 'time' => time()], 256), 'Merchant_Order_Result_Yes');
                    return $this->ret;
                }
            }
            $this->ret['msg'] = '无码可用';
            Yii::info(json_encode($this->ret, 256), 'Merchant_Order_Result_No');
            return $this->ret;
        } catch (\Exception $e) {
            Yii::info($e->getMessage() . '-' . $e->getFile() . '-' . $e->getLine() . '--' . json_encode($data, 256), 'Merchant_Order_Error');
        }
    }

    /**
     * 商户查询订单
     */
    public function actionQuery()
    {
        $data = Yii::$app->request->bodyParams;

        $temp = $data;
        $temp['return_time'] = date('Y-m-d H:i:s');
        $temp['sign'] = Order::validateSign($data['mch_code'], $temp)['sign'];

        $merchantQuery = new MerchantQuery();
        $merchantQuery->load($data, '');
        if (!($merchantQuery->validate())) {
            //数据验证不通过则返回验证信息
            $this->ret['msg'] = Common::getModelError($merchantQuery);
            $this->ret['data'] = $temp;
            \Yii::error(json_encode($data, 256), 'MerchantQuery_validateError');
            return $this->ret;
        }
        $sign = Order::validateSign($data['mch_code'], $data);
        if ($sign == null || $sign['sign'] != $data['sign']) {
            $this->ret['msg'] = '验签不通过';
            $this->ret['data'] = $temp;
            \Yii::error(json_encode($data, 256), 'MerchantQuery_validateSignError');
            return $this->ret;
        }

        $order = Order::queryOrder($data['mch_code'], $data['mch_order_id']);
        if (!$order) {
            $this->ret['msg'] = '未查询到订单信息';
            $this->ret['data'] = $temp;
            \Yii::error(json_encode($data, 256), 'MerchantQuery_validateSignError');
            return $this->ret;
        }

        $this->ret['msg'] = '查询成功';
        $this->ret['result'] = 1;
        $temp['order_status'] = $order->order_status;
        $temp['order_amount'] = $order->order_amount;
        $temp['notify_status'] = $order->notify_status;
        $temp['id'] = $order->order_id;
        $temp['sign'] = Order::validateSign($data['mch_code'], $temp)['sign'];
        $this->ret['data'] = $temp;
        \Yii::info(json_encode(['data' => $data, 'return' => $this->ret]), 'MerchantQuery_validateSignOk');
        return $this->ret;
    }

    /**
     * 商户查询余额
     */
    public function actionQueryMerchantBalance()
    {
        $data = Yii::$app->request->bodyParams;

        $temp = $data;
        $temp['return_time'] = date('Y-m-d H:i:s');
        $temp['sign'] = Order::validateSign($data['mch_code'], $temp)['sign'];

        $merchantQuery = new MerchantQuery();
        $merchantQuery->load($data, '');
        if (!($merchantQuery->validate())) {
            //数据验证不通过则返回验证信息
            $this->ret['msg'] = Common::getModelError($merchantQuery);
            $this->ret['data'] = $temp;
            \Yii::error(json_encode($data, 256), 'QueryMerchantBalance_validateError');
            return $this->ret;
        }
        $sign = Order::validateSign($data['mch_code'], $data);
        if ($sign == null || $sign['sign'] != $data['sign']) {
            $this->ret['msg'] = '验签不通过';
            $this->ret['data'] = $temp;
            \Yii::error(json_encode($data, 256), 'QueryMerchantBalance_validateSignError');
            return $this->ret;
        }

        $merchant = Merchant::find()->where(['=', 'mch_code', $data['mch_code']])->select(['balance'])->one();
        if (!$merchant) {
            $this->ret['msg'] = '未查询到商户信息';
            $this->ret['data'] = $temp;
            \Yii::error(json_encode($data, 256), 'QueryMerchantBalance_validateSignError');
            return $this->ret;
        }

        $this->ret['msg'] = '查询成功';
        $this->ret['result'] = 1;
        $temp['balance'] = $merchant->balance;
        $temp['sign'] = Order::validateSign($data['mch_code'], $temp)['sign'];
        $this->ret['data'] = $temp;
        \Yii::info(json_encode(['data' => $data, 'return' => $this->ret]), 'QueryMerchantBalance_validateSignOk');
        return $this->ret;
    }

    /**
     * 收银台查询订单
     */
    public function actionFrontPay()
    {
        $unique = Yii::$app->request->post('unique', '');
        $queryQr = Yii::$app->request->post('queryQr', '');
        if (!$unique) {
            $this->ret['msg'] = '缺少参数';
            return $this->ret;
        }
        $final = [];
        $data = Yii::$app->redis->get($unique . 'success');
        if (!$data || $queryQr == 888) {
            $temp = Yii::$app->redis->get($unique);
            if (!$temp) {
                $this->ret['msg'] = '订单已过期';
                return $this->ret;
            }
            $temp = json_decode($temp, 1);
            $order = Order::find()->where(['mch_name' => $temp['mch_name'], 'mch_order_id' => $temp['mch_order_id']])->one();
            if (!$order) {
                $this->ret['msg'] = '无此订单信息';
                return $this->ret;
            }
            if ($queryQr == 888) {
                if (strpos($order->read_remark, '已获取') === false) {
                    $order->read_remark = $order->read_remark . '[已获取]';
                }
            } else {
                if (strpos($order->read_remark, '已访问') === false) {
                    $order->read_remark = $order->read_remark . '[已访问]';
                }
            }
            $order->save();
            $final['qr_address'] = $temp['qr_address'];
            $final['order_id'] = $order->order_id;
            $final['qr_type'] = $order->order_type;
            $final['expire_time'] = strtotime($order->expire_time);
            $final['order_amount'] = bcsub($order->order_amount, $order->benefit, 2);
            $final['uid'] = '';
            $final['qr_account'] = '';
            $final['qr_nickname'] = '';
            $final['bank_card_number'] = '';
            $final['bank_address'] = '';
            $final['bank_code'] = '';
            $final['real_name'] = '';
            $final['read_remark'] = '';

            $qr = QrCode::find()->where(['qr_code' => $order->qr_code])->select(['alipay_uid', 'qr_account', 'qr_nickname', 'bank_card_number', 'bank_code', 'bank_address', 'real_name'])->one();
            if ($qr) {
                if ($qr->alipay_uid) {
                    $final['uid'] = $qr->alipay_uid;
                }
                /*
                $final['qr_account'] = $qr->qr_account;
                $final['qr_nickname'] = $qr->qr_nickname;
                $final['bank_card_number'] = $qr->bank_card_number;
                $final['bank_address'] = $qr->bank_address;
                $final['real_name'] = $qr->real_name;
                $final['bank_code'] = Yii::t('app', 'BankTypes')[$qr->bank_code]['BankTypeName'];
                $final['read_remark'] = $order->read_remark;
                */

                $final['qr_account'] = $qr->qr_account ? $qr->qr_account : '';
                $final['qr_nickname'] = $qr->qr_nickname ? $qr->qr_nickname : '';
                $final['bank_card_number'] = $qr->bank_card_number ? $qr->bank_card_number : '';
                $final['bank_address'] = $qr->bank_address ? $qr->bank_address : '';
                $final['real_name'] = $qr->real_name ? $qr->real_name : '';
                $final['bank_code'] = $qr->bank_code && isset(Yii::t('app', 'BankTypes')[$qr->bank_code]) && isset(Yii::t('app', 'BankTypes')[$qr->bank_code]['BankTypeName']) && Yii::t('app', 'BankTypes')[$qr->bank_code]['BankTypeName'] ? Yii::t('app', 'BankTypes')[$qr->bank_code]['BankTypeName'] : '';
                $final['read_remark'] = $order->read_remark ? $order->read_remark : '';
            }

            if ($final['expire_time'] > 0) {
                Yii::$app->redis->setex($unique . 'success', $final['expire_time'], json_encode($final, 256));
            }
        } else {
            $final = json_decode($data, 1);
        }
        $final['counterTime'] = $final['expire_time'] - time();
        $this->ret['msg'] = '查询成功';
        $this->ret['result'] = 1;
        $this->ret['data'] = $final;
        return $this->ret;
    }
}
